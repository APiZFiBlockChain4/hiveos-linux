#!/usr/bin/env bash

#[ -t 1 ] &&
. colors

set -o pipefail

date
echo ""

[[ -f $RIG_CONF ]] && . $RIG_CONF

[[ $MAINTENANCE == 2 ]] &&
	echo "${YELLOW}Maintenance mode enabled, exiting${NOCOLOR}" &&
	exit 1

#Preventing nvidia-smi from running if necessary
NV_OFF=0
[[ -f "/run/hive/NV_OFF" ]] && read NV_OFF < "/run/hive/NV_OFF"
[[ $NV_OFF == 1 ]] && exit 0


systemctl status hivex > /dev/null || echo "${YELLOW}WARNING: X Server is not running! Some settings will not be applied!${NOCOLOR}"

export DISPLAY=":0"
NVS_TIMEOUT=10
NVSMI_TIMEOUT=10
PILLMEM=-1000

# check it in first place
if [ ! -f $NVIDIA_OC_CONF ]; then
	echo "$NVIDIA_OC_CONF does not exist"
	exit
fi

source $NVIDIA_OC_CONF

n=`gpu-detect NVIDIA`
if [[ $n == 0 ]]; then
	echo "No NVIDIA cards detected, exiting"
	exit
fi

echo "Detected $n NVIDIA cards"

if [[ ! -f $GPU_DETECT_JSON ]]; then
	gpu_detect_json=`gpu-detect listjson`
else
	gpu_detect_json=$(< $GPU_DETECT_JSON)
fi


readarray -t NAME   < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.name' )
readarray -t RAM    < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.mem' )
readarray -t BUSID  < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.busid' )
readarray -t PLMAX  < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_max' )
readarray -t PLMIN  < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_min' )
readarray -t PLDEF  < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_def' )
readarray -t FANCNT < <( echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.fan_cnt' )


n=${#BUSID[@]}
if [[ $n -eq 0 ]]; then
	echo -e "No cards available for OC!\nPlease check BIOS settings, risers, connectors and PSU.\nTry to update Nvidia drivers."
	exit 1
fi


if [[ ! -z $RUNNING_DELAY && $RUNNING_DELAY -gt 0 ]]; then
	[[ ! -z $MAX_RUNNING_DELAY && $RUNNING_DELAY -gt $MAX_RUNNING_DELAY ]] &&
		echo "${YELLOW}Limiting delay to ${MAX_RUNNING_DELAY} seconds${NOCOLOR}" &&
		RUNNING_DELAY=$MAX_RUNNING_DELAY
	echo "${CYAN}Sleeping $RUNNING_DELAY seconds...${NOCOLOR}"
	sleep $RUNNING_DELAY
fi


pgrep --full nvidia-persistenced > /dev/null || nvidia-persistenced --persistence-mode


# kill Pill if running.
pkill -f '/hive/opt/ohgodapill/run.sh'
pkill -f '/hive/opt/ohgodapill/OhGodAnETHlargementPill-r2'
[[ "$OHGODAPILL_ENABLED" -eq 1 && "$OHGODAPILL_START_TIMEOUT" -lt 0 ]] && PILLFIX=1 || PILLFIX=0


print_array() {
	local desc=$1
	local arr=($2)
	local align=10
	local pad=5
	printf "%-${align}s :" "$desc"
	for item in "${arr[@]}"
	do
		printf "%${pad}s" "$item"
	done
	printf "\n"
}


# MAP OC to MB BUS ID
[[ -e "$BUSID_FILE" ]] && source $BUSID_FILE
# prefer NVIDIA especially for mixed rigs
[[ ! -z "$BUSID_NVIDIA" ]] && BUSID_MB="$BUSID_NVIDIA"
if [[ ! -z "$BUSID_MB" ]]; then
	# add one more item to the end for not defined busid GPU
	BUSID_MB=($BUSID_MB "@")
	declare -A GPU_MAPPING
	for((idx=0; idx<${#BUSID_MB[@]}; idx++))
	do
		GPU_MAPPING["${BUSID_MB[$idx]}"]=$idx     #"
	done
	n=${#BUSID_MB[@]}
fi


PARAMS=(CLOCK MEM PLIMIT FAN)

# pad arrays
for param in "${PARAMS[@]}"; do
	[[ -z ${!param} ]] && continue
	arr=(${!param})
	for (( i=${#arr[@]}; i<$n; i++ )); do
		read "$param[$i]" < <( echo "${arr[-1]}" ) # use last element of initial array
	done
done

echo ""

# Remap OC according to bus id
if [[ ! -z $BUSID_MB ]]; then
	# map params to temp array
	for param in "${PARAMS[@]}"; do
		arr="${param}[*]"
		declare -a "_$param"="( ${!arr} )"
		unset "${param}"
	done

	for (( i=0; i < ${#BUSID[@]}; i++ )); do
		busid=${BUSID[$i]/:00\.0}
		[[ ! -z $busid ]] && idx=${GPU_MAPPING[$busid]} || idx=
		[[ -z $idx ]] && idx=${GPU_MAPPING["@"]}
		#[[ $i -ne $idx ]] && echo "Mapping GPU $i settings to index $idx"
		# remap params
		for param in "${PARAMS[@]}"; do
			val="_$param[$idx]"
			read "$param[$i]" < <( echo "${!val}" )
		done
	done
	print_array "MB BUS ID" "${BUSID_MB[*]}"
else
	for param in "${PARAMS[@]}"; do
		arr="${param}[*]"
		declare -a "$param"="( ${!arr} )"
	done
fi

print_array "GPU BUS ID" "${BUSID[*]/:00\.0}"
for param in "${PARAMS[@]}"; do
	arr="${param}[*]"
	print_array "$param" "${!arr}"
done


[[ "${FANCNT[*]}" =~ [2-9] ]] &&
	print_array "FANCNT" "${FANCNT[*]//null/1}"


AUTOFAN_ENABLED=$( [[ `pgrep -cf "/hive/sbin/autofan run"` -gt 0 && -f $AUTOFAN_CONF ]] && source $AUTOFAN_CONF && echo "$ENABLED" )


nvparams=
nvquery=`timeout -s9 $NVS_TIMEOUT nvidia-settings -q GPUMemoryTransferRateOffset -q GPUGraphicsClockOffset -q GPUTargetFanSpeed \
             -q GPULogoBrightness -q GPUPowerMizerMode -q GPUPerfModes | grep -vE "values|target" | tr '\n' ' ' 2>&1`
nvcode=$?
if [[ $nvcode -eq 0 ]]; then
	nvparams="${nvquery//Attribute/$'\n'}"
elif [[ $nvcode -ge 124 ]]; then
	echo "NVS query error: nvidia-settings failed by timeout"
else
	echo "NVS query error: $perfquery"
fi


fan_idx=0
exitcode=0


for (( i=0; i < ${#BUSID[@]}; ++i )); do
	args=""

	echo ""
	echo "${YELLOW}===${NOCOLOR} GPU ${CYAN}$i${NOCOLOR}, ${BUSID[$i]} ${GREEN}${NAME[$i]} ${RAM[$i]}${NOCOLOR}, PL: ${PLMIN[$i]}, ${PLDEF[$i]}, ${PLMAX[$i]} ${YELLOW}=== `date +"%T"`${NOCOLOR}"

	#pldef=${PLDEF[$i]%%[!0-9]*}
	#if [[ ! -z $PLIMIT && ${PLIMIT[$i]} -gt 0 ]]; then
		# check limits
		#if [[ $pldef -gt 0 ]]; then
		#	plmax=${PLMAX[$i]%%[!0-9]*}
		#	plmin=${PLMIN[$i]%%[!0-9]*}
		#	[[ $plmax -gt $pldef && ${PLIMIT[$i]} -gt $plmax ]] && PLIMIT[$i]=${PLMAX[$i]%%[!0-9\.]*} && echo "${RED}Power limit was set to MAX value${NOCOLOR}"
		#	[[ $plmin -lt $pldef && ${PLIMIT[$i]} -lt $plmin ]] && PLIMIT[$i]=${PLMIN[$i]%%[!0-9\.]*} && echo "${RED}Power limit was set to MIN value${NOCOLOR}"
		#fi
	#	nvresult=`timeout -s9 $NVSMI_TIMEOUT nvidia-smi -i $i -pl ${PLIMIT[$i]}`
	#	nvcode=$?
	#else
		#if [[ $plcur != $pldef ]]; then
	#		echo "Restoring default power limit ${pldef}"
	#		nvresult=`timeout -s9 $NVSMI_TIMEOUT nvidia-smi -i $i -pl $pldef`
	#		nvcode=$?
		#fi
	#fi
	#[[ $nvcode -ne 0 ]] && color=$RED || color=$NOCOLOR
	#nvresult=`echo "$nvresult" | grep -vE "^$|All done\."`
	#[[ ! -z $nvresult ]] && echo "${color}$nvresult${NOCOLOR}"
	#[[ $nvcode -ge 124 ]] && echo "${RED}nvidia-smi failed by timeout$NOCOLOR"
	#[[ $nvcode -ne 0 ]] && exitcode=$nvcode


	pldef="${PLDEF[$i]%%[!0-9]*}"
	[[ -z "${PLIMIT[$i]}" ]] && PLIMIT[$i]=0
	nvresult=`timeout -s9 $NVSMI_TIMEOUT nvtool -q --nodev -i $i --setpl ${PLIMIT[$i]}`
	nvcode=$?
	[[ $nvcode -ne 0 ]] && color=$RED || color=$NOCOLOR
	[[ ! -z "$nvresult" ]] && echo "${color}$nvresult${NOCOLOR}"
	[[ $nvcode -ge 124 ]] && echo "${RED}nvtool failed by timeout$NOCOLOR"
	[[ $nvcode -ne 0 ]] && exitcode=$nvcode


	x=`echo "$nvparams" | grep -oP "'GPUPerfModes'.*\[gpu\:$i\].* perf=\K[0-9]+"`
	if [[ -z $x ]]; then
		x=3 # default
		if   [[ ${NAME[$i]} =~ "RTX" ]]; then x=4
		elif [[ ${NAME[$i]} =~ "P106-090" || ${NAME[$i]} =~ "P104-100" || ${NAME[$i]} =~ "P102-100" ]]; then x=1
		elif [[ ${NAME[$i]} =~ "1660 Ti"  || ${NAME[$i]} =~ "1660 SUPER" || ${NAME[$i]} =~ "1650 SUPER" ]]; then x=4
		elif [[ ${NAME[$i]} =~ "P106-100" || ${NAME[$i]} =~ "1050" || ${NAME[$i]} =~ "1650" || ${NAME[$i]} =~ "1660" ]]; then x=2
		fi
		echo "  Max Perf mode: $x"
	else
		echo "  Max Perf mode: $x (auto)"
	fi


	[[ `echo "$nvparams" | grep -oP "'GPUPowerMizerMode'.*\[gpu\:$i\]\): \K[0-9]+"` != "${POWERMIZER:-1}" ]] &&
		args+=" -a [gpu:$i]/GPUPowerMizerMode=${POWERMIZER:-1}"


	fans_count="${FANCNT[$i]}"
	[[ -z $fans_count || $fans_count == "null" ]] && fans_count=1

	[[ -z "${FAN[$i]}" ]] && FAN[$i]=0
	if [[ `echo "$nvparams" | grep -oP "'GPUTargetFanSpeed'.*\[gpu\:$i\]\): \K[0-9]+"` == "${FAN[$i]}" ]]; then
		echo "'GPUTargetFanSpeed' was already set to ${FAN[$i]}"
	else
		if [[ ${FAN[$i]} == 0 ]]; then
			[[ "$AUTOFAN_ENABLED" != 1 ]] &&
				args+=" -a [gpu:$i]/GPUFanControlState=0"
		else
			args+=" -a [gpu:$i]/GPUFanControlState=1"
			for (( z = $fan_idx; z < $(( $fan_idx+$fans_count )); z++ )); do
				args+=" -a [fan:$z]/GPUTargetFanSpeed=${FAN[$i]}"
			done
		fi
	fi
	fan_idx=$(( $fan_idx+$fans_count ))


	[[ -z "${CLOCK[$i]}" ]] && CLOCK[$i]=0
	if [[ `echo "$nvparams" | grep -oP "'GPUGraphicsClockOffset'.*\[gpu\:$i\]\): \K[0-9]+"` == "${CLOCK[$i]}" ]]; then
		echo "  'GPUGraphicsClockOffset' was already set to ${CLOCK[$i]}"
	else
		args+=" -a [gpu:$i]/GPUGraphicsClockOffset[$x]=${CLOCK[$i]}"
	fi


	[[ -z "${MEM[$i]}" ]] && MEM[$i]=0
	[[ $PILLFIX -eq 1 && "${NAME[$i]}" =~ 1080 && ${MEM[$i]} -ne $PILLMEM ]] && MEMCLOCK=0 || MEMCLOCK="${MEM[$i]}"
	if [[ `echo "$nvparams" | grep -oP "'GPUMemoryTransferRateOffset'.*\[gpu\:$i\]\): \K[0-9]+"` == "$MEMCLOCK" ]]; then
		echo "  'GPUMemoryTransferRateOffset' was already set to $MEMCLOCK"
	else
		args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[$x]=$MEMCLOCK"
	fi


	brightness=`echo "$nvparams" | grep -oP "'GPULogoBrightness'.*\[gpu\:$i\]\): \K[0-9]+"`
	[[ ! -z "$brightness" && ! -z "$LOGO_BRIGHTNESS" && "$brightness" != "$LOGO_BRIGHTNESS" ]] &&
		args+=" -a [gpu:$i]/GPULogoBrightness=$LOGO_BRIGHTNESS"


	if [[ ! -z $args ]]; then
		echo -en "${RED}"
		nvresult=`timeout -s9 $NVS_TIMEOUT nvidia-settings $args 2>&1`
		nvcode=$?
		#[[ $nvcode -ne 0 ]] && color=$RED || color=$NOCOLOR
		[[ $nvcode -ge 124 ]] && echo "nvidia-settings failed by timeout"
		nvresult=`echo "$nvresult" | grep -v "^$"`
		echo "${NOCOLOR}$nvresult"
		[[ $nvcode -ne 0 ]] && exitcode=$nvcode
	fi

done


# start Pill if needed
if [[ "$OHGODAPILL_ENABLED" -eq 1 ]]; then
	echo
	echo "${YELLOW}===${NOCOLOR} Starting OhGodAnETHlargementPill ${YELLOW}=== `date +"%T"`${NOCOLOR}"
	sleep 1

	if [[ "$PILLFIX" -eq 1 ]]; then
		# phase 0
		/hive/opt/ohgodapill/OhGodAnETHlargementPill-r2 > /var/run/hive/ohgodapill 2>&1 &
		sleep 1
		#pkill -f '/hive/opt/ohgodapill/OhGodAnETHlargementPill-r2' >/dev/null
		kill $!
		wait $! 2>/dev/null

		# phase 1
		args=
		for (( i=0; i < $n; ++i )); do
			[[ "${NAME[$i]}" =~ 1080 && ${MEM[$i]} -ne 0 && ${MEM[$i]} -ne $PILLMEM ]] &&
				args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[3]=$PILLMEM"
		done
		if [[ ! -z $args ]]; then
			echo "${RED}"
			nvresult=`timeout -s9 $NVS_TIMEOUT nvidia-settings $args`
			nvcode=$?
			[[ $nvcode -ge 124 ]] && echo "nvidia-settings failed by timeout"
			nvresult=`grep -v "^$" <<< "$nvresult"`
			echo "${NOCOLOR}$nvresult"
			[[ $nvcode -ne 0 ]] && exitcode=$nvcode
			sleep 1
		fi
	
		# phase 2
		args=
		for (( i=0; i < $n; ++i )); do
			[[ "${NAME[$i]}" =~ 1080 && ${MEM[$i]} -ne 0 && ${MEM[$i]} -ne $PILLMEM ]] &&
				args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[3]=${MEM[$i]}"
		done
		if [[ ! -z $args ]]; then
			echo "${RED}"
			nvresult=`timeout -s9 $NVS_TIMEOUT nvidia-settings $args`
			nvcode=$?
			[[ $nvcode -ge 124 ]] && echo "nvidia-settings failed by timeout"
			nvresult=`grep -v "^$" <<< "$nvresult"`
			echo "${NOCOLOR}$nvresult"
			[[ $nvcode -ne 0 ]] && exitcode=$nvcode
			sleep 1
		fi
	fi

	echo
	echo "Pill will be ready in ${OHGODAPILL_START_TIMEOUT#-} sec"
	nohup /hive/opt/ohgodapill/run.sh $OHGODAPILL_ARGS > /dev/null 2>&1 &
fi

echo ""

exit $exitcode
