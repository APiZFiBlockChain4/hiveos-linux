#!/usr/bin/env bash

if [[ -z $RIG_CONF ]]; then #reread env variables as after upgrade this can be empty
	source /etc/environment
	export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
fi

# set minimum LA for watchdog to 2 * cores/threads + 1
MIN_WD_LA=$(( $(nproc --all) * 2 + 1 ))

SLEEP=10 #seconds to sleep over iteration
OK_MESSAGE_REDUCE=$(( 1 * 60 / $SLEEP )) #e.g. only every 6th message will be displayed to reduce log

[ -t 1 ] && . /hive/bin/colors


function loadconf() {
	WD_ENABLED=

	if [ ! -f $RIG_CONF ]; then
		echo -e "${RED}No config $RIG_CONF${NOCOLOR}"
		echo "Exiting"
		exit 1
	else
		. $RIG_CONF
	fi


	[[ -z $WD_ENABLED || $WD_ENABLED != 1 ]] &&
		echo -e "${YELLOW}Watchdog not enabled, exiting${NOCOLOR}" &&
		exit 0


	minhash=`echo $WD_MINHASHES | jq -r ".\"$MINER\""`
	[[ -z $minhash || $minhash == "null" ]] &&
		message warn "Minimal hashrate for $MINER is not set" &&
		echo -e "${RED}Minimal hashrate for $MINER is not set in config, exiting${NOCOLOR}" &&
		exit 1
}


function set_lastgood() {
	#lastgood=`date +%s`
	[[ -e $HASHRATE_KHS ]] &&
		lastgood=`stat -c %Y $HASHRATE_KHS` ||
		#lastgood=0 can't set it to 0, in case of boot agent may be late
		lastgood=`date +%s` #let's count from now

	miner_restart_count=0
}


function check_la() {

	local max_la=$WD_MAX_LA
	[[ -z $max_la || $max_la -lt $MIN_WD_LA ]] && max_la=MIN_WD_LA
	local max_la2x=$(( $max_la * 2 ))
	local la=$( cat /proc/loadavg )
	local la1=$( awk '{printf int($1)}' <<< $la )
	local la5=$( awk '{printf int($2)}' <<< $la )
	
	# reboot if LA (5 min) >= maxLA
	if [ $la5 -ge $max_la ]; then
		echo -e "${RED}LA is more than $max_la: $la5 ${NOCOLOR}"
		message error "LA > $max_la, rebooting" > /dev/nul
		sleep 5
		#nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
		sreboot
	# reboot if LA (1 min) >= maxLA * 2
	elif [ $la1 -ge $max_la2x ]; then
		echo -e "${RED}LA is more than $max_la2x: $la1 ${NOCOLOR}"
		message error "LA > $max_la2x, rebooting" > /dev/nul
		sleep 5
		#nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
		sreboot
	elif [[ $check_count == 0 ]]; then
		echo "${GREEN}OK${NOCOLOR} LA(5m): $la5.0 < $max_la.0, LA(1m): $la1.0 < $max_la2x.0"
	fi
}


function check_gpu() {
	# check if gpu-stat stop working most likely because of hanged gpu
	local gpu_cnt=$(cat /run/hive/gpu-stats.json | jq 'length')
	if [[ "$gpu_cnt" == "0" ]]; then
		#check again
		sleep 30
		gpu_cnt=$(cat /run/hive/gpu-stats.json | jq 'length')
		if [[ "$gpu_cnt" == "0" ]]; then
			echo -e "{RED}GPU are lost, rebooting ${NOCOLOR}"
			message error "GPU are lost, rebooting" > /dev/nul
			sleep 5
			sreboot
		fi
	fi
}

check_count=0
set_lastgood
ok_count=0


function loop() {
	#echo -n "[`date`] "

	loadconf
	
	#check every 2nd interval, ie 20 sec
	if [[ $(( $check_count % 2 )) == 0 ]]; then
		[[ ! -z $WD_CHECK_GPU ]] && check_gpu
		[[ ! -z $WD_MAX_LA ]] && check_la
	fi
	((check_count++))
	[[ $check_count -ge $OK_MESSAGE_REDUCE ]] && check_count=0


	khs=
	[[ -e $HASHRATE_KHS ]] && khs=`cat $HASHRATE_KHS`
	[[ -z $khs ]] && khs=0


	hashok=`echo $khs $minhash | awk '{ print ($1 >= $2) ? 1 : 0 }'` #float comparison

	if [[ $hashok == 1 ]]; then
		set_lastgood
		[[ $ok_count == 0 ]] &&
			echo -e "${GREEN}OK${NOCOLOR} ${CYAN}$MINER${NOCOLOR} $khs kHs >= $minhash kHs"

		((ok_count++))
		[[ $ok_count -ge $OK_MESSAGE_REDUCE ]] && ok_count=0

		return
	fi


	now=`date +%s`
	elapsed=$(($now - $lastgood))
	#echo Elapsed $elapsed seconds

	echo -e "${RED}BARK${NOCOLOR} ${CYAN}$MINER${NOCOLOR} $khs kHs < $minhash kHs for $elapsed seconds"

	#Check to reboot first
	if [[ ! -z $WD_REBOOT ]]; then
		reboot_timeout=`echo $WD_REBOOT 60 | awk '{print $1 * $2}'`
		if [[ $elapsed -ge $reboot_timeout ]]; then
			message danger "$MINER low hashrate ($khs kH/s), rebooting"
			echo -e "---"
			echo -e "${RED}Rebooting after $WD_REBOOT minutes${NOCOLOR}"
			echo -e "---"
			#sreboot
			nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
			return #for testing and if it does not work)
		fi
	fi

	#Check to restart miner
	if [[ ! -z $WD_MINER ]]; then
		miner_restart_timeout=`echo $WD_MINER 60 | awk '{print $1 * $2}'`
		if [[ $miner_restart_count == 0 && $elapsed -ge $miner_restart_timeout ]]; then
			message warn "$MINER low hashrate ($khs kH/s), restarting"
			echo -e "---"
			echo -e "${YELLOW}Restarting ${CYAN}$MINER${NOCOLOR} ${YELLOW}after $WD_MINER minutes${NOCOLOR}"
			echo -e "---"
			miner_restart_count=1
			miner restart
		fi
	fi
}


function run() {

	loadconf

	#temporary until frontend will be ready
	WD_CHECK_GPU=1
	WD_MAX_LA=25

	echo "MINER RESTART:  $WD_MINER minutes"
	echo "REBOOT:         $WD_REBOOT minutes"
	
	[[ ! -z $WD_MAX_LA ]] && echo "MAX LA:         $WD_MAX_LA.0 (min $MIN_WD_LA.0)"
	[[ ! -z $WD_CHECK_GPU ]] && echo "CHECK GPU:      Enabled"
	
	while true; do
		loop
		sleep $SLEEP
	done
}

########################################################################################################################

case $1 in
	run)
		run
	;;
	stop)
		systemctl stop hive-watchdog
	;;
	start)
		systemctl start hive-watchdog
	;;
	restart)
		systemctl restart hive-watchdog
	;;
	log)
		journalctl -u hive-watchdog --no-pager $2 $3 $4 $5 $6 $7
	;;
	status)
		systemctl status hive-watchdog
	;;
	*)
		bname=`basename $0`
		echo -e "${YELLOW}Hashrate Watchdog${NOCOLOR}"
		echo -e "Usage: ${CYAN}$bname start|stop|restart|log|status${NOCOLOR}"
	;;
esac
