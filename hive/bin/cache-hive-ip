#!/usr/bin/env bash

# !!!using only IPv4 addresses and interfaces!!!

query_timeout=10

# name servers for queries
dns_srv=("8.8.8.8" "1.1.1.1" "114.114.114.114")

# update servers to cache
upd_srv=("download.hiveos.farm")

# get current hosts
oldhosts=`cat /etc/hosts`
# it always looses last newline
oldhosts+=$'\n'

newhosts="# DO NOT EDIT. All changes will be overwritten by cache-hive-ip
127.0.0.1 localhost
# The following lines are desirable for IPv6 capable hosts
::1 localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
"


function add_host { # global $resolve

	# adding only first address
	addr=`grep -m 1 -oP "$1.*\sA\s\K[^\s]+$" <<< "$resolve"`
	if [[ -z $addr ]]; then
		# check for CNAME
		cname=`grep -m 1 -oP "$1.*\sCNAME\s\K[^\s]+$" <<< "$resolve"`
		[[ ! -z $cname ]] && addr=`grep -m 1 -oP "$cname.*\sA\s\K[^\s]+$" <<< "$resolve"`
		[[ -z $addr ]] && echo "> Unable to resolve: $1" && return 4
	fi

	# IPv4 only!
	if [[ $addr =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo "> Adding to cache \"$addr $1\""
		newhosts+="$addr $1"$'\n'
		return 0
	fi

	echo "> Unable to extract IP address: $addr"
	return 5
}


function update_hosts () {

	[ ! -e $RIG_CONF ] && echo "> No $RIG_CONF" && return 1
	. $RIG_CONF
	[[ -z $HIVE_HOST_URL ]] && echo "> HIVE_HOST_URL is empty" && return 2
	local HOST=`echo $HIVE_HOST_URL | awk -F'://' '{print $2}'`
	[[ -z $HOST ]] && echo "> Unable to parse host name: $HIVE_HOST_URL" && return 3

	# add rig host
	# not using hostname-check here as it directly writes to /etc/hosts
	[[ ! -z $WORKER_NAME ]] && hostname=$WORKER_NAME || hostname=worker #fallback hostname
	[[ $hostname =~ ^([0-9]+).* ]] && hostname="hive$WORKER_NAME" #echo "${BASH_REMATCH[1]}"
	newhosts+=$'\n'"# WORKER NAME"$'\n'"127.0.0.1 $hostname"$'\n'

	newhosts+=$'\n'"# HIVEOS CACHE BEGIN"$'\n'

	# get system dns servers
	local dns=(`networkctl status 2>/dev/null | grep -Pazo "DNS: \K[0-9\.\s]+" | tr -d "[:blank:]" | tr -d "\0"`)

	# merge all servers
	dns+=("${dns_srv[@]}")

	local query_servers=""
	local dns_servers=()
	# remove duplicates, empty and localhost
	for((i=0; i<${#dns[@]}; i++))
	do
		[[ -z ${dns[$i]} || ${dns[$i]} =~ ^127\.0\.0\.[0-9]+$ || ! ${dns[$i]} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && continue;
		for((x=0; x<$i; x++))
		do
			[[ ${dns_servers[$x]} == ${dns[$i]} ]] && break
		done
		[[ $x == $i ]] && dns_servers[$i]=${dns[$i]} && query_servers+=" @${dns[$i]}"
	done
	echo "> Using DNS servers: ${dns_servers[@]}"

	echo "> Resolving: $HOST"
	# using dig to query multiple dns servers at once
	resolve=`dig -4 +noall +answer +retry=0 +time=$query_timeout $query_servers $HOST`
	echo "$resolve"

	# parse Hive API host and exit on error
	add_host $HOST || return $?

	echo "> Resolving: ${upd_srv[@]}"
	resolve=`dig -4 +noall +answer +retry=0 +time=$query_timeout $query_servers ${upd_srv[@]}`
	echo "$resolve"

	# parse update hosts
	for host in "${upd_srv[@]}"
	do
		add_host $host
	done
}

exitcode=0

if [[ $1 != "resetonly" ]]; then
	#[[ $(networkctl list | grep -c routable) -eq 0 ]] && echo "> No connection to network" && exit 10
	update_hosts
	exitcode=$?
fi

# update only if needed
if [[ "$oldhosts" != "$newhosts" ]]; then
	echo "$newhosts" > /etc/hosts
	echo "> Hosts update done"
	sync
else
	echo "> Hosts is up to date"
fi

exit $exitcode
