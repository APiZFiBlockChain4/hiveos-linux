#!/usr/bin/env bash

if [[ $# < 1 ]]; then
	echo "Usage: $0 NVIDIA|AMD|list|listjson|listnvidia"
	exit 1
fi

[ -t 1 ] && . colors
#[[ -t 1 || $2 == "--colors" ]] && . colors

. /hive/etc/amd.ids

NV_OFF=0
[[ -f "/run/hive/NV_OFF" ]] && read NV_OFF < "/run/hive/NV_OFF"

NVIDIA_FAN_COUNT=

# Wait 4 sec for another amdmeminfo process to finish
#for value in {1..40}; do
#	[[ -z `pidof amdmeminfo` ]] && break
#	sleep 0.1
#done

GPU_STRING="VGA|3D controller|Display controller"

if [[ $1 == "list" || $1 == "listjson" ]]; then
	#Moved to /hive/bin/hive
#	amdmeminfo -q -s -n > /run/hive/amdmeminfo-$$ 2>&1 #just run it to warmup or it will not detect memory type
#	amdmeminfo=
#	[[ -z $GPU_COUNT_AMD ]] && GPU_COUNT_AMD=`gpu-detect AMD`
#	if [[ $GPU_COUNT_AMD -gt 0 ]]; then
#		if [[ ! -f $AMDMEMINFO_FILE ]]; then
#			amdmeminfo -q -s -n > /run/hive/amdmeminfo1-$$ 2>&1 #just run it to warmup or it will not detect memory type
#			amdmeminfo -q -s -n > /run/hive/amdmeminfo2-$$ 2>&1 #just run it to warmup or it will not detect memory type
#			amdmeminfo -q -s -n > /run/hive/amdmeminfo3-$$ 2>&1 #just run it to warmup or it will not detect memory type
#			amdmeminfo -q -s -n > /run/hive/amdmeminfo4-$$ 2>&1 #just run it to warmup or it will not detect memory type
#			amdmeminfo -q -s -n > /run/hive/amdmeminfo5-$$ 2>&1 #just run it to warmup or it will not detect memory type
#			amdmeminfo -q -s -n > $AMDMEMINFO_FILE 2>&1
#		fi
#		[[ -f $AMDMEMINFO_FILE ]] && amdmeminfo=`cat $AMDMEMINFO_FILE`
#		#amdmeminfo can fail from the first time and skip some cards, let's rerun it
#		if [[ `echo "$amdmeminfo" | wc -l` != $GPU_COUNT_AMD ]]; then
#			sleep 0.1
#			amdmeminfo -q -s -n > $AMDMEMINFO_FILE 2>&1
			[[ -f $AMDMEMINFO_FILE ]] && amdmeminfo=`cat $AMDMEMINFO_FILE`
#		fi
#	fi


	if [[ ! -z $2 && $2 == "AMD" ]]; then
		list=`lspci | grep -E "$GPU_STRING" | grep "Advanced Micro Devices" | grep -v "RS880" | grep -v "Stoney"`
	elif [[ ! -z $2 && $2 == "NVIDIA" ]]; then
		list=`lspci | grep -E "$GPU_STRING" | grep "NVIDIA" | grep -v "nForce"`
	else
		list=`lspci | grep -E "$GPU_STRING"`
	fi
	gpus=()


	gpu_brand_i=-1
	while read -r s; do
		[[ -z $s ]] && continue
		unset gputype
		[[ $s =~ "NVIDIA" && ! $s =~ "nForce" ]] &&
			gputype="NVIDIA" && COLOR=$GREEN && gpu_brand_i=$((gpu_brand_i+1))
		[[ $s =~ "Advanced Micro Devices" && ! $s =~ "RS880" && ! $s =~ "Stoney" ]] &&
			gputype="AMD" && COLOR=$RED && gpu_brand_i=$((gpu_brand_i+1))

		#[[ $s =~ ^([0-9a-z:.]+).*\[(.+)\] ]]
		#re='^([0-9a-z\:\.]+) VGA compatible controller: (.*)$'
		re='^([0-9a-z\:\.]+) (VGA compatible|3D|Display) controller: (.*)$'
		[[ $s =~ $re ]]
		busid=${BASH_REMATCH[1]}
		name=${BASH_REMATCH[3]}
		additional=""
		
		subvendor=$(lspci -vmms $busid | grep SVendor | sed  's/SVendor:\t//') #Get vendor info
		
		#echo $s
		#echo $busid

		if [[ $gputype == "AMD" ]]; then
			#GPU1:09.00.0:Radeon RX 470:113-1E3471U.O69:0x506066f2:SK Hynix H5GC4H24AJR
			#GPU0:07.00.0:Radeon RX 470:113-1E3471U.O69:0x506066f2:SK Hynix H5GC4H24AJR
			meminfopci=${BASH_REMATCH[1]}
			meminfopci=${meminfopci%$":00.0"} #cut out suffix
			meminfopci=:${meminfopci}.00.0:
			meminfo=$(grep "$meminfopci" <<< "$amdmeminfo")
			if [[ ! -z $meminfo ]]; then
				#meminfo=(${meminfo//:/ }) #split by :
				_IFS=$IFS && IFS=":"
				read -a meminfo <<< "$meminfo" #explode array by :
				IFS=$_IFS
				name=${meminfo[2]}
				IS_VEGA10=$( lspci -vnns $busid | grep -Ei "$GPU_VEGA10" | wc -l )
				IS_VEGA20=$( lspci -vnns $busid | grep -Ei "$GPU_VEGA20" | wc -l )
					if [[ $IS_VEGA10 -gt 0 || $IS_VEGA20 -gt 0  ]]; then
						memvendor=`amdmemtweak  --current | grep -A 2 $busid |grep Memory: | cut -f2 -d ':'|xargs`
					else
						memvendor=${meminfo[4]}
					fi
				#[   26.705145] amdgpu 0000:07:00.0: VRAM: 4096M 0x0000000000000000 - 0x00000000FFFFFFFF (4096M used)
				mem=`dmesg | grep -oE "amdgpu 0000:${busid}: VRAM:\s.*" | sed -n 's/.*VRAM:\s\([0-9MG]\+\).*/\1/p'`
				additional=" ($mem, ${meminfo[3]}, ${meminfo[4]})"
				if [[ $1 == "listjson" ]]; then
					gpujson=`jq -n -c --arg busid "$busid" --arg name "$name" --arg brand "amd" --arg subvendor "$subvendor" \
						--arg vbios "${meminfo[3]}" --arg mem_type "$memvendor" \
						'{$busid, $name, $brand, $subvendor, $vbios, $mem_type}'`
					[[ ! -z $mem ]] && gpujson=`echo $gpujson | jq -c --arg mem "$mem" '. + {$mem}'`
					gpus+=("$gpujson")
					continue
				fi
			fi
		elif [[ $gputype == "NVIDIA" ]]; then
			if [[ $NV_OFF -ne 1 ]]; then
				if [[ ! -f $NVIDIASMI_FILE ]]; then
					nvidia-smi --query-gpu=gpu_bus_id,gpu_name,memory.total,power.min_limit,power.default_limit,power.max_limit,vbios_version --format=csv,noheader > $NVIDIASMI_FILE
					# report error
					grep -q -i "insufficiently powered" $NVIDIASMI_FILE &&
						cat $NVIDIASMI_FILE | message error "Nvidia insufficient power" payload > /dev/null

				fi

				#00000000:05:00.0, GeForce GTX 1080 Ti, 11172 MiB, 300.00 W
				#00000000:06:00.0, GeForce GTX 1060 6GB, 6072 MiB, 140.00 W
				#00000000:0C:00.0, GeForce GTX 1080, 8114 MiB, 326.00 W
				#00000000:01:00.0, GeForce GTX 1050 Ti, 4038 MiB, 52.50 W, 120.00 W, 130.00 W

				[[ -z $NVIDIA_FAN_COUNT ]] &&
					NVIDIA_FAN_COUNT=`nvtool -quiet -csv -busid -fancount 2>/dev/null`

				nvidiainfo=`grep -i "00000000:$busid, " $NVIDIASMI_FILE` #ignore busid case
			fi
			if [[ ! -z $nvidiainfo ]]; then
				#shity fucking bash array, just get line by number. ebis ono provalis
				#nvidiainfo=`echo $nvidiainfo | sed -e 's/,\s/\n/g'` #split by ", "
				#name=`echo "$nvidiainfo" | sed '2q;d'` #get line by number
				#mem=`echo "$nvidiainfo" | sed '3q;d'`
				#plim_max=`echo "$nvidiainfo" | sed '4q;d'`
				#vbios=""
				#[[ -e /proc/driver/nvidia/gpus/0000:$busid/information ]] &&
				#	vbios=`cat /proc/driver/nvidia/gpus/0000:$busid/information | grep "Video BIOS" | awk '{print $3}'`

				name=`awk -F', ' '{print $2}' <<< $nvidiainfo`
				mem=`awk -F', ' '{print $3}' <<< $nvidiainfo`
				plim_min=`awk -F', ' '{print $4}' <<< $nvidiainfo`
				plim_def=`awk -F', ' '{print $5}' <<< $nvidiainfo`
				plim_max=`awk -F', ' '{print $6}' <<< $nvidiainfo`
				vbios=`awk -F', ' '{print $7}' <<< $nvidiainfo`
				
				# 200.00 W -> 200 W
				plim_min=${plim_min/.00/}
				plim_def=${plim_def/.00/}
				plim_max=${plim_max/.00/}

				fan_cnt=`grep -i "00000000:$busid" <<< "$NVIDIA_FAN_COUNT" | awk -F',' '{print $2}'`
				[[ -z $fan_cnt || $fan_cnt == 0 ]] && fan_cnt=1

				additional=" ($mem, $plim_def)"
				if [[ $1 == "listjson" ]]; then
					gpus+=(`jq -n -c --arg busid "$busid" --arg name "$name" --arg brand "nvidia" --arg subvendor "$subvendor" \
						--arg mem "$mem" --arg vbios "$vbios" \
						--arg plim_min "$plim_min" --arg plim_def "$plim_def" --arg plim_max "$plim_max" --arg fan_cnt "$fan_cnt" \
						'{$busid, $name, $brand, $subvendor, $mem, $vbios, $plim_min, $plim_def, $plim_max, $fan_cnt}'`)
					continue
				fi
			fi
		else #unknown type
			#[[ $1 == "listjson" ]] && continue #we don't need internal gpu in report
			COLOR=$YELLOW
		fi

		#default construction
		if [[ $1 == "listjson" ]]; then
			gpus+=(`jq -n -c --arg busid "$busid" --arg name "$name" --arg brand "cpu" '{$busid, $name, $brand}'`)
			continue
		fi

		[[ $gpu_brand_i -ge 0 ]] && gpu_index=`printf "%2d" $gpu_brand_i` || gpu_index="  "
		echo -e "${BLUE}${gpu_index}${NOCOLOR} $busid ${COLOR}$name${NOCOLOR}$additional"
	done <<<"$list"

	if [[ $1 == "listjson" ]]; then
		echo "${gpus[@]}" | jq --slurp . #| jq --slurp -c .
	fi
	
	exit 0
elif [[ $1 == "listnvidia" ]]; then
	list=`nvidia-smi --query-gpu=gpu_bus_id,gpu_name --format=csv,noheader`
	while read -r s; do
		echo $s | sed -e "s/^00000000://" | sed -e "s/,\s/ /"
	done <<<"$list"
	exit 0
elif [[ $1 == "AMD" ]]; then
	lspci | grep -E "$GPU_STRING" | grep "Advanced Micro Devices" | grep -v "RS880" | grep -v "Stoney" | wc -l
elif [[ $1 == "AMD_FIRST" ]]; then
	lspci | grep -E "$GPU_STRING" | head -n 1 | grep "Advanced Micro Devices" | grep -v "RS880" | grep -v "Stoney" | wc -l
elif [[ $1 == "NVIDIA" ]]; then
	lspci | grep -E "$GPU_STRING" | grep "NVIDIA" | grep -v "nForce" | wc -l
elif [[ $1 == "NVIDIA_FIRST" ]]; then
	lspci | grep -E "$GPU_STRING" | head -n 1 | grep "NVIDIA" | grep -v "nForce" | wc -l
else
	#default, just grep
	lspci | grep -E "($GPU_STRING).*$1" | wc -l
fi


