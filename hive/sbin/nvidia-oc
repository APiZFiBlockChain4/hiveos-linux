#!/usr/bin/env bash
#[ -t 1 ] &&
. colors


date
echo ""

[[ -f $RIG_CONF ]] && . $RIG_CONF

[[ $MAINTENANCE == 2 ]] &&
	echo -e "${YELLOW}Maintenance mode enabled, exiting${NOCOLOR}" &&
	exit 1

#Preventing nvidia-smi from running if necessary
NV_OFF=0
[[ -f "/run/hive/NV_OFF" ]] && read NV_OFF < "/run/hive/NV_OFF"
[[ $NV_OFF == 1 ]] && exit 0


systemctl status hivex > /dev/null
[[ $? -ne 0 ]] && echo -e "${YELLOW}WARNING: X Server is not running! Some settings will not be applied!${NOCOLOR}"

export DISPLAY=":0"
NVS_TIMEOUT=10
NVSMI_TIMEOUT=10

# check it in first place
if [ ! -f $NVIDIA_OC_CONF ]; then
	echo "$NVIDIA_OC_CONF does not exist"
	exit
fi

source $NVIDIA_OC_CONF

n=`gpu-detect NVIDIA`
if [[ $n == 0 ]]; then
	echo "No NVIDIA cards detected, exiting"
	exit
fi

echo "Detected $n NVIDIA cards"

if [ ! -f $GPU_DETECT_JSON ]; then
	gpu_detect_json=`gpu-detect listjson`
else
	gpu_detect_json=`cat $GPU_DETECT_JSON`
fi

n=`echo "$gpu_detect_json" | jq -c '[ . | to_entries[] | select(.value.brand == "nvidia") | .key ] | length'`

[[ $n -eq 0 ]] && echo -e "No cards available for OC! \nPlease check BIOS settings, risers, connectors and PSU. \nTry to update Nvidia drivers." && exit 1

if [[ ! -z $RUNNING_DELAY && $RUNNING_DELAY -gt 0 ]]; then
	[[ ! -z $MAX_RUNNING_DELAY && $RUNNING_DELAY -gt $MAX_RUNNING_DELAY ]] &&
		echo -e "${YELLOW}Limiting delay to ${MAX_RUNNING_DELAY} seconds${NOCOLOR}" &&
		RUNNING_DELAY=$MAX_RUNNING_DELAY
	echo -e "${CYAN}Sleeping $RUNNING_DELAY seconds...${NOCOLOR}"
	sleep $RUNNING_DELAY
fi

[[ -z $FAN || $FAN == "" ]] && FAN=0

[[ -z $PLIMIT || $PLIMIT == "" ]] && PLIMIT=0


# kill Pill if running 
pkill -f '/hive/opt/ohgodapill/run.sh'
pkill -f '/hive/opt/ohgodapill/OhGodAnETHlargementPill-r2'
[[ "$OHGODAPILL_ENABLED" -eq 1 && "$OHGODAPILL_START_TIMEOUT" -lt 0 ]] && PILLFIX=1 || PILLFIX=0


#pad arrays
[[ ! -z $CLOCK ]] && CLOCK=($CLOCK) || CLOCK=(0)
for (( i=${#CLOCK[@]}; i < $n; ++i )); do
	CLOCK[$i]=${CLOCK[$i-1]}
done

[[ ! -z $MEM ]] && MEM=($MEM) || MEM=(0)
for (( i=${#MEM[@]}; i < $n; ++i )); do
	MEM[$i]=${MEM[$i-1]}
done

[[ ! -z $FAN ]] && FAN=($FAN) || FAN=(0)
for (( i=${#FAN[@]}; i < $n; ++i )); do
	FAN[$i]=${FAN[$i-1]}
done

[[ ! -z $PLIMIT ]] && PLIMIT=($PLIMIT) || PLIMIT=(0)
for (( i=${#PLIMIT[@]}; i < $n; ++i )); do
	PLIMIT[$i]=${PLIMIT[$i-1]}
done

declare -a FANCNT=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.fan_cnt'`)

echo ""

echo "CORE   = ${CLOCK[*]}"
echo "MEM    = ${MEM[*]}"
echo "PLIMIT = ${PLIMIT[*]}"
echo "FAN    = ${FAN[*]}"
echo "FANCNT = ${FANCNT[*]}"

echo ""

pgrep --full nvidia-persistenced > /dev/null || nvidia-persistenced --persistence-mode


_IFS=$IFS && IFS=$'\n'
declare -a NAME=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.name'`)
declare -a RAM=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.mem'`)
declare -a BUSID=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.busid'`)
declare -a PLMAX=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_max'`)
declare -a PLMIN=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_min'`)
declare -a PLDEF=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_def'`)
IFS=$_IFS

fan_idx=0
exitcode=0

for (( i=0; i < $n; ++i )); do

	echo -e "${YELLOW}===${NOCOLOR} GPU ${CYAN}$i${NOCOLOR}, ${BUSID[$i]} ${GREEN}${NAME[$i]} ${RAM[$i]}${NOCOLOR}, PL: ${PLMIN[$i]}, ${PLDEF[$i]}, ${PLMAX[$i]} ${YELLOW}=== `date +"%T"`${NOCOLOR}"

	pldef=${PLDEF[$i]%%[!0-9]*}
	if [[ ! -z $PLIMIT && ${PLIMIT[$i]} -gt 0 ]]; then
		# check limits
		#if [[ $pldef -gt 0 ]]; then
		#	plmax=${PLMAX[$i]%%[!0-9]*}
		#	plmin=${PLMIN[$i]%%[!0-9]*}
		#	[[ $plmax -gt $pldef && ${PLIMIT[$i]} -gt $plmax ]] && PLIMIT[$i]=${PLMAX[$i]%%[!0-9\.]*} && echo -e "${RED}Power limit was set to MAX value${NOCOLOR}"
		#	[[ $plmin -lt $pldef && ${PLIMIT[$i]} -lt $plmin ]] && PLIMIT[$i]=${PLMIN[$i]%%[!0-9\.]*} && echo -e "${RED}Power limit was set to MIN value${NOCOLOR}"
		#fi
		nvresult=`timeout -s9 $NVSMI_TIMEOUT nvidia-smi -i $i -pl ${PLIMIT[$i]}`
		nvcode=$?

	else
		#if [[ $plcur != $pldef ]]; then
			echo "Restoring default power limit ${pldef}"
			nvresult=`timeout -s9 $NVSMI_TIMEOUT nvidia-smi -i $i -pl $pldef`
			nvcode=$?
		#fi
	fi
	[[ $nvcode -ne 0 ]] && color=$RED || color=$NOCOLOR
	nvresult=`grep -v "^$" <<< "$nvresult"`
	[[ ! -z $nvresult ]] && echo -e "${color}$nvresult${NOCOLOR}"
	[[ $nvcode -ge 124 ]] && echo -e "${RED}nvidia-smi failed by timeout$NOCOLOR"
	[[ $nvcode -ne 0 ]] && exitcode=$nvcode
	
	#not working
	#nvidia-smi -i ${i} -ac 4004,1911

	args=
	args+=" -a [gpu:$i]/GPUPowerMizerMode=1"

	fans_count=${FANCNT[$i]}
	[[ -z $fans_count || $fans_count == "null" ]] && fans_count=1

	if [[ -z $FAN || ${FAN[$i]} == 0 ]]; then
		args+=" -a [gpu:$i]/GPUFanControlState=0"
	else
		args+=" -a [gpu:$i]/GPUFanControlState=1"
		for (( z = $fan_idx; z < $(( $fan_idx+$fans_count )); z++ )); do
			args+=" -a [fan:$z]/GPUTargetFanSpeed=${FAN[$i]}"
		done
	fi

	fan_idx=$(( $fan_idx+$fans_count ))

	#echo "i=$i x=$x"
	#GTX 1050 wanted i=2, allothers want i=3
	x=3
	if [[ ${NAME[$i]} =~ "1050" ]]; then x=2
	elif [[ ${NAME[$i]} =~ "P106-100" ]]; then x=2
	elif [[ ${NAME[$i]} =~ "P106-090" ]]; then x=1
	elif [[ ${NAME[$i]} =~ "P104-100" ]]; then x=1
	elif [[ ${NAME[$i]} =~ "P102-100" ]]; then x=1
	elif [[ ${NAME[$i]} =~ "1660 Ti" || ${NAME[$i]} =~ "1660 SUPER" ]]; then x=4
	elif [[ ${NAME[$i]} =~ "RTX" ]]; then x=4
	elif [[ ${NAME[$i]} =~ "1650" ]]; then x=2
	elif [[ ${NAME[$i]} =~ "1660" ]]; then x=2
	fi

	[[ ! -z $CLOCK ]] &&
		args+=" -a [gpu:$i]/GPUGraphicsClockOffset[$x]=${CLOCK[$i]}"
	
	if [[ ! -z $MEM ]]; then
		if [[ $PILLFIX -eq 1 && "${NAME[$i]}" =~ 1080 ]]; then
			args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[$x]=0"
		else
			args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[$x]=${MEM[$i]}"
		fi
	fi

	[[ ! -z $LOGO_BRIGHTNESS ]] &&
		args+=" -a [gpu:$i]/GPULogoBrightness=$LOGO_BRIGHTNESS"

	if [[ ! -z $args ]]; then
		echo -en "${RED}"
		nvresult=`timeout -s9 $NVS_TIMEOUT nvidia-settings $args`
		nvcode=$?
		#[[ $nvcode -ne 0 ]] && color=$RED || color=$NOCOLOR
		[[ $nvcode -ge 124 ]] && echo "nvidia-settings failed by timeout"
		nvresult=`grep -v "^$" <<< "$nvresult"`
		echo -e "${NOCOLOR}$nvresult"
		[[ $nvcode -ne 0 ]] && exitcode=$nvcode
	fi
	
done


# start Pill if needed
if [[ "$OHGODAPILL_ENABLED" -eq 1 ]]; then
	echo
	echo -e "${YELLOW}===${NOCOLOR} Starting OhGodAnETHlargementPill ${YELLOW}=== `date +"%T"`${NOCOLOR}"
	sleep 1

	if [[ "$PILLFIX" -eq 1 ]]; then
		# phase 0
		/hive/opt/ohgodapill/OhGodAnETHlargementPill-r2 > /var/run/hive/ohgodapill 2>&1 &
		sleep 1
		#pkill -f '/hive/opt/ohgodapill/OhGodAnETHlargementPill-r2' >/dev/null
		kill $!
		wait $! 2>/dev/null

		# phase 1
		args=
		for (( i=0; i < $n; ++i )); do
			[[ "${NAME[$i]}" =~ 1080 && ${MEM[$i]} -ne 0 ]] &&
				args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[3]=-1000"
		done
		if [[ ! -z $args ]]; then
			echo -e "${RED}"
			nvresult=`timeout -s9 $NVS_TIMEOUT nvidia-settings $args`
			nvcode=$?
			[[ $nvcode -ge 124 ]] && echo "nvidia-settings failed by timeout"
			nvresult=`grep -v "^$" <<< "$nvresult"`
			echo -e "${NOCOLOR}$nvresult"
			[[ $nvcode -ne 0 ]] && exitcode=$nvcode
			sleep 1
		fi
	
		# phase 2
		args=
		for (( i=0; i < $n; ++i )); do
			[[ "${NAME[$i]}" =~ 1080 && ${MEM[$i]} -ne 0 ]] &&
				args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[3]=${MEM[$i]}"
		done
		if [[ ! -z $args ]]; then
			echo -e "${RED}"
			nvresult=`timeout -s9 $NVS_TIMEOUT nvidia-settings $args`
			nvcode=$?
			[[ $nvcode -ge 124 ]] && echo "nvidia-settings failed by timeout"
			nvresult=`grep -v "^$" <<< "$nvresult"`
			echo -e "${NOCOLOR}$nvresult"
			[[ $nvcode -ne 0 ]] && exitcode=$nvcode
			sleep 1
		fi
	fi

	echo
	echo "Pill will be ready in ${OHGODAPILL_START_TIMEOUT#-} sec"
	nohup /hive/opt/ohgodapill/run.sh $OHGODAPILL_ARGS > /dev/null 2>&1 &
fi


#
#if [ -z $CPUFREQ ]; then
#    :
#    #echo "WARNING: CPUFREQ not set"
#else
#    :
#    #dont see any improvement with this
#    #cpufreq-set -c 0 -g performance
#    #cpufreq-set -c 1 -g performance
#    #cpufreq-set -c 0 -f 2800Mhz
#    #cpufreq-set -c 1 -f 2800Mhz
#    #echo "performance" >/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
#    #echo "performance" >/sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
#    #echo $CPUFREQ > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
#    #echo $CPUFREQ > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
#fi


exit $exitcode
