#!/usr/bin/env bash

# !!!using only IPv4 addresses!!!

# name servers for queries
dns_srv=(" " "1.1.1.1" "8.8.8.8" "114.114.114.114")

# update servers to cache
upd_srv=("download.hiveos.farm")

# get current hosts
oldhosts=`cat /etc/hosts`
# it always looses last newline
oldhosts+=$'\n'

newhosts="# DO NOT EDIT. All changes will be overwritten by cache-hive-ip
127.0.0.1 localhost
# The following lines are desirable for IPv6 capable hosts
::1 localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
"


function add_host {

	# using host for lookup. getenv uses /etc/host itself!
	for srv in "${dns_srv[@]}"
	do
		resolve=`host -W 10 $1 $srv`
		exitcode=$?
		echo "> Resolving $1"$'\n'"$resolve"
		[[ $exitcode -eq 0 ]] && break
	done

	count=`grep -c "has address" <<< "$resolve"` # IPv4
	#echo "$count, $exitcode"

	[[ $exitcode -ne 0 || $count -eq 0 ]] && return 10

	# adding only first address
	resolve=`grep -m 1 "has address" <<< "$resolve"`
	addr=${resolve#*has address }
	
	# IPv4 only!
	if [[ $addr =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		echo "> Adding to cache \"$addr $1\""
		newhosts+="$addr $1"$'\n'
		return 0
	fi
	
	echo "> Unable to extract address"
	return 11
}


function update_hosts () {
	
	[ ! -e $RIG_CONF ] && echo "> No $RIG_CONF" && return 1
	. $RIG_CONF
	[[ -z $HIVE_HOST_URL ]] && echo "> HIVE_HOST_URL is empty" && return 2

	# add rig host
	# not using hostname-check here as it directly writes to /etc/hosts
	[[ ! -z $WORKER_NAME ]] && hostname=$WORKER_NAME || hostname=worker #fallback hostname
	[[ $hostname =~ ^([0-9]+).* ]] && hostname="hive$WORKER_NAME" #echo "${BASH_REMATCH[1]}"
	newhosts+=$'\n'"# WORKER NAME"$'\n'"127.0.0.1 $hostname"$'\n'

	newhosts+=$'\n'"# HIVEOS CACHE BEGIN"$'\n'

	# add update hosts
	for host in "${upd_srv[@]}"
	do
		add_host $host
	done

	# add api host
	local HOST=`echo $HIVE_HOST_URL | awk -F'://' '{print $2}'`
	[[ -z $HOST ]] && echo "> Unable to parse hostname from $HIVE_HOST_URL" && return 3
	add_host $HOST
	exitcode=$?

	return $exitcode
}

exitcode=0

if [[ $1 != "resetonly" ]]; then
	update_hosts
	exitcode=$?
fi

# update only if needed
if [[ "$oldhosts" != "$newhosts" ]]; then
	echo "$newhosts" > /etc/hosts
	echo "> Hosts update done"
	sync
else
	echo "> Hosts is up to date"
fi

exit $exitcode
