#!/usr/bin/env bash

#[ -t 1 ] &&
. colors
. $RIG_CONF

# set timeout for fan test
timeout=7

# use for testing without applying anything
DEBUG=0

export DISPLAY=":0"


stop_fans() {
	if [[ ! -z ${NVIDIA_BUSID[*]} ]]; then
		echo -e "${CYAN}> Stopping all NVIDIA GPU fans...${NOCOLOR}"
		local gpu_idx=0
		local fan_idx=0
		local args=
		for busid in "${NVIDIA_BUSID[@]}"; do
			local fan_count=${NVIDIA_FANS[$gpu_idx]}
			[[ -z $fan_count || $fan_count == "null" ]] && fan_count=1
			args+=" -a [gpu:$gpu_idx]/GPUPowerMizerMode=0"
			args+=" -a [gpu:$gpu_idx]/GPUFanControlState=1"
			for (( i = $fan_idx; i < $(( $fan_idx+$fan_count )); i++ )); do
				args+=" -a [fan:$i]/GPUTargetFanSpeed=0"
			done
			gpu_idx=$(( $gpu_idx+1 ))
			fan_idx=$(( $fan_idx+$fan_count ))
		done

		if [[ ! -z $args ]]; then
			# apply nvidia-settings
			[[ "$DEBUG" == "1" ]] && echo $args ||
				nvidia-settings $args 1>/dev/null
		fi
	fi

	if [[ ! -z ${AMD_BUSID[*]} ]]; then
		echo -e "${CYAN}> Stopping all AMD GPU fans...${NOCOLOR}"
		for busid in "${AMD_BUSID[@]}"; do
			# find gpu_id by bus_id and apply fan setting to gpu
			cardno=`echo "$cards_indexes" | grep $busid | awk -F/card '  { print $2 }'`
			[[ -z $cardno ]] && echo -e "${RED}Setting GPU with busid $busid failed${NOCOLOR}" && return
			[[ "$DEBUG" == "1" ]] && echo "-i $cardno --set-fanspeed 0" ||
				wolfamdctrl -i $cardno --set-fanspeed 0 1>/dev/null
		done
	fi
}


test_gpu() {
	# convert to gpu-detect.json index
	index=${GPU_KEYS[$1]}
	[[ -z $index ]] && echo -e "${RED}GPU #$1 not found${NOCOLOR}" && return

	gpudata=`jq '.['$index']' <<< "$gpu_detect_json"`
	busid=`jq -r .busid <<< "$gpudata"`
	name=`jq -r .name <<< "$gpudata"`
	brand=`jq -r .brand <<< "$gpudata"`

	local COLOR=$YELLOW
	[[ $brand == "nvidia" ]] && COLOR=$GREEN
	[[ $brand == "amd" ]] && COLOR=$RED
	[[ $brand == "cpu" ]] && return

	echo -ne "> Spinning fans on GPU ${YELLOW}#$1${NOCOLOR} $busid ${COLOR}$name${NOCOLOR}"

	if [[ $brand == "nvidia" ]]; then
		local gpu_idx=0
		local fan_idx=0
		# find gpu and fan indexes by bus_id
		for id in "${NVIDIA_BUSID[@]}"; do
			local fan_count=${NVIDIA_FANS[$gpu_idx]}
			[[ -z $fan_count || $fan_count == "null" ]] && fan_count=1
			[[ $busid == $id ]] && break
			gpu_idx=$(( $gpu_idx+1 ))
			fan_idx=$(( $fan_idx+$fan_count ))
		done
		# apply fan setting to 100%
		args=" -a [gpu:$gpu_idx]/GPUFanControlState=1"
		for (( i = $fan_idx; i < $(( $fan_idx+$fan_count )); i++ )); do
			args+=" -a [fan:$i]/GPUTargetFanSpeed=100"
		done
		[[ "$DEBUG" == "1" ]] && echo $args ||
			nvidia-settings $args 1>/dev/null
		# sleep for (timeout) in sec
		for ((i=0; i<$timeout; i++)); do
			echo -n "." && sleep 1
		done
		# set fan speed to 0% again
		args=" -a [gpu:$gpu_idx]/GPUFanControlState=1"
		for (( i = $fan_idx; i < $(( $fan_idx+$fan_count )); i++ )); do
			args+=" -a [fan:$i]/GPUTargetFanSpeed=0"
		done
		[[ "$DEBUG" == "1" ]] && echo $args ||
			nvidia-settings $args 1>/dev/null
		echo -e "${GREEN}OK${NOCOLOR}"
		sleep 1
	fi

	if  [[ $brand == "amd" ]]; then
		# find gpu index by bus_id
		cardno=`echo "$cards_indexes" | grep $busid | awk -F/card '  { print $2 }'`
		[[ -z $cardno ]] && echo -e "${RED}Setting GPU with busid $busid failed${NOCOLOR}" && return
		# apply fan setting to 100%
		[[ "$DEBUG" == "1" ]] && echo "-i $cardno --set-fanspeed 100" ||
			wolfamdctrl -i $cardno --set-fanspeed 100 1>/dev/null
		# sleep for(timeout) in sec
		for ((i=0; i<$timeout; i++)); do
			echo -n "." && sleep 1
		done
		# set fan speed to 0% again
		[[ "$DEBUG" == "1" ]] && echo "-i $cardno --set-fanspeed 0" ||
			wolfamdctrl -i $cardno --set-fanspeed 0 1>/dev/null
		echo -e "${GREEN}OK${NOCOLOR}"
		sleep 1
	fi
}

if [ ! -f $GPU_DETECT_JSON ]; then
	gpu_detect_json=`gpu-detect listjson`
else
	gpu_detect_json=`cat $GPU_DETECT_JSON`
fi

cards_indexes=`realpath /sys/devices/*/*/*/drm/card*`
declare -a NVIDIA_BUSID=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.busid'`)
declare -a NVIDIA_FANS=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.fan_cnt'`)
declare -a AMD_BUSID=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "amd") | .value.busid'`)

# indexes of valid gpus
declare -a GPU_KEYS=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand != "cpu") | .key'`)

gpu_count=${#GPU_KEYS[*]}

if [[ "$DEBUG" == "1" ]]; then
	echo "NVIDIA: ${NVIDIA_BUSID[*]}"
	echo "FANS: ${NVIDIA_FANS[*]}"
	echo "AMD: ${AMD_BUSID[*]}"
	echo "KEYS: ${GPU_KEYS[*]}"
	echo "COUNT: ${#GPU_KEYS[*]}"
fi

date

echo -e "${YELLOW}================ START SEARCH GPU ================${NOCOLOR}"
gpu-detect list
echo ""

[[ -z ${NVIDIA_BUSID[*]} && -z ${AMD_BUSID[*]} ]] &&
	echo -e "No ${RED}AMD${NOCOLOR} or ${GREEN}NVIDIA${NOCOLOR} found" &&
	exit 1

[[ ! -z $1 ]] && [[ -z "${1##*[!0-9]*}" || $1 -ge $gpu_count ]] &&
	echo -e "${YELLOW}GPU index must be in range [0-$gpu_count]${NOCOLOR}" &&
	exit 1


if [[ "$DEBUG" != "1" ]]; then
	echo -e "> Stopping miner session"
	miner stop

	echo -e "> Stopping hashrate watchdog"
	wd stop

	echo -e "> Stopping autofan"
	screen -S autofan -X quit;
fi 

#if [[ ! -z ${NVIDIA_BUSID[*]} ]]; then
#	nvidia-persistenced --persistence-mode 1>/dev/null
#	nvidia-smi -pm 1  1>/dev/null
#fi

echo -e "> Stopping Fans"
[[ ! -z ${AMD_BUSID[*]} ]] && echo -e "${YELLOW}Notice: If you have AMD GPU with GPU temp 511 this fan will not be stopped!${NOCOLOR}"
stop_fans

# onboard and not properly detected gpus have NO index
if [[ -z $1 ]]; then
	gpuid=0
	while [[ $gpuid -lt $gpu_count ]]; do
		#echo -e $gpuid
		test_gpu $gpuid
		let gpuid=gpuid+1
	done
else
	gpuid=$1
	test_gpu $gpuid
fi

if [[ "$DEBUG" != "1" ]]; then
	echo -e "> Restoring OC settings..."
	[[ ! -z ${NVIDIA_BUSID[*]} ]] && nvidia-oc 1>/dev/null
	[[ ! -z ${AMD_BUSID[*]} ]] && amd-oc 1>/dev/null

	echo -e "> Starting autofan"
	autofan

	if [[ $MAINTENANCE -ne 1 ]]; then
		echo -e "> Starting hashrate watchdog"
		wd start

		echo -e "> Starting miner session"
		miner start
	fi 
fi

exit 0
