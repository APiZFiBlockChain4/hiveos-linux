#!/usr/bin/env bash

set -o pipefail

#echo "Creating Xorg config"


# disable glamregl extension as it often crashes X server
[[ -f /usr/lib/xorg/modules/libglamoregl.so ]] &&
	mv -f /usr/lib/xorg/modules/libglamoregl.so /usr/lib/xorg/modules/libglamoregl.so.disabled
[[ -f /opt/amdgpu/lib/xorg/modules/libglamoregl.so ]] &&
	mv -f /opt/amdgpu/lib/xorg/modules/libglamoregl.so /opt/amdgpu/lib/xorg/modules/libglamoregl.so.disabled



#if [ ! -f $GPU_DETECT_JSON ]; then
#	gpu_detect_json=`gpu-detect listjson`
#else
#	gpu_detect_json=`cat $GPU_DETECT_JSON`
#fi

#amd_first=`gpu-detect AMD_FIRST`
#amd_busids=(`jq -c '[ . | to_entries[] | select(.value.brand == "amd") | .value.busid ] | .[]' <<< "$gpu_detect_json" 2>/dev/null`)
#nvidia_busids=(`jq -c '[ . | to_entries[] | select(.value.brand == "nvidia") | .value.busid ] | .[]' <<< "$gpu_detect_json" 2>/dev/null`)


convert_busid() {
	local busid=($1)
	local busid_arr=(${busid[0]//[!0-9a-fA-F]/ })
	echo "$((16#${busid_arr[0]})):$((16#${busid_arr[1]})):$((16#${busid_arr[2]}))"
}


gpu_detect="`lspci | grep -E "VGA|3D controller|Display controller"`"

amd_primary=`echo "$gpu_detect" | head -n 1 | grep "Advanced Micro Devices" | grep -v "RS880" | grep -v "Stoney" | wc -l`
amd_busids=(`echo "$gpu_detect" | grep "Advanced Micro Devices" | grep -v "RS880" | grep -v "Stoney" | cut -d" " -f1`)
#echo "AMD - ${amd_busids[@]}"

nvidia_busids=(`echo "$gpu_detect" | grep "NVIDIA" | grep -v "nForce" | cut -d" " -f1`)
#echo "NV - ${nvidia_busids[@]}"

internal=`echo "$gpu_detect" | head -n 1 | grep -vE "NVIDIA|AMD"`
#echo "INTERNAL - $internal"


devidx=0
nv_connected=
screens_section=
conf=


# add Nvidia first if monitor is connected to it
if [[ ${#nvidia_busids[@]} -gt 0 && $devidx -eq 0 ]]; then
	nv_monitors=(`nvidia-smi --query-gpu=gpu_bus_id,display_mode --format=csv,noheader 2>/dev/null | grep "Enabled" | cut -d, -f1`)
	if [[ ! -z $nv_monitors ]]; then
		echo "Detected monitor on NVIDIA GPU ${nv_monitors[@]}"
		nv_connected=${nv_monitors[0]/00000000:}
		echo "Adding 1 NVIDIA GPU as the primary one"

		busid=$nv_connected
		busid_dec=$(convert_busid $busid)

		conf+="
# --- $busid -------------------------------------------------------------------
Section \"Device\"
	Identifier     \"Device$devidx\"
	Driver         \"nvidia\"
	Option         \"Coolbits\" \"31\"
	BusID          \"PCI:$busid_dec\"
EndSection

Section \"Screen\"
	Identifier     \"Screen$devidx\"
	Device         \"Device$devidx\"
	Option         \"Coolbits\" \"31\"
EndSection
"
		screens_section+=$'\t'"Screen $devidx \"Screen$devidx\" 0 0"$'\n'
		((devidx++))
	fi
fi


# add AMD only if it is first and primary
if [[ $amd_primary -gt 0 && $devidx -eq 0 ]]; then
	amd_monitors=()
	statuses=(`grep "^connected" /sys/class/drm/*/status 2>/dev/null`)
	for status in "${statuses[@]}"; do
		#echo "$status"
		dev_path="${status%%-*}/device/uevent"
		[[ -f $dev_path ]] && pciid=`grep PCI_SLOT_NAME $dev_path 2>/dev/null` && amd_monitors+=(${pciid##*=})
	done

	echo "Adding ${#amd_busids[@]} AMD GPU to config"

	if [[ ! -z $amd_monitors ]]; then
		echo "Detected monitor on AMD GPU ${amd_monitors[@]}"
		busid=${amd_monitors[0]/0000:}
		busid_dec=$(convert_busid $busid)
	conf+="
# --- $busid -------------------------------------------------------------------
Section \"Device\"
	Identifier     \"Device$devidx\"
	Driver         \"amdgpu\"
	BusID          \"PCI:$busid_dec\"
EndSection

Section \"Screen\"
	Identifier     \"Screen$devidx\"
	Device         \"Device$devidx\"
EndSection
"
		screens_section+=$'\t'"Screen $devidx \"Screen$devidx\" 0 0"$'\n'
		((devidx++))
	fi

	for busid in "${amd_busids[@]}"; do
		# skip already added
		[[ $amd_connected == $busid ]] && continue

		busid_dec=$(convert_busid $busid)

	conf+="
# --- $busid -------------------------------------------------------------------
Section \"Device\"
	Identifier     \"Device$devidx\"
	Driver         \"amdgpu\"
	BusID          \"PCI:$busid_dec\"
EndSection

Section \"Screen\"
	Identifier     \"Screen$devidx\"
	Device         \"Device$devidx\"
EndSection
"
		screens_section+=$'\t'"Screen $devidx \"Screen$devidx\" 0 0"$'\n'
		((devidx++))
	done
elif [[ ${#amd_busids[@]} -gt 0 ]]; then
	echo "Detected ${#amd_busids[@]} AMD GPU, but none is the primary, skipping"
fi


# add Internal only if is first
if [[ ! -z $internal && $devidx -eq 0 ]]; then
	busid=`awk '{print $1}' <<< "$internal"`
	busid_dec=$(convert_busid $busid)

	internal_driver="vesa" # default
	[[ $internal =~ "Intel" ]] && internal_driver="intel" # 00:02.0 VGA compatible controller: Intel Corporation HD Graphics 610
	[[ $internal =~ "VMware" ]] && internal_driver="vmware" # 00:02.0 VGA compatible controller: VMware SVGA II Adapter
	[[ $internal =~ "Device 1234:1111" ]] && internal_driver="vesa"
	[[ $internal =~ "QXL" ]] && internal_driver="vga" #internal_driver="modesetting", with modesetting driver - OC will not work
	
	echo "Adding internal GPU $busid with \"$internal_driver\" driver, it is the primary one"

	conf+="
# --- Internal GPU -------------------------------------------------------------
Section \"Device\"
	Identifier     \"Device$devidx\"
	Driver         \"$internal_driver\"
	BusID          \"PCI:$busid_dec\"
EndSection

Section \"Screen\"
	Identifier     \"Screen$devidx\"
	Device         \"Device$devidx\"
	Monitor        \"Monitor0\"
EndSection
"
	screens_section+=$'\t'"Screen $devidx \"Screen$devidx\" 0 0"$'\n'
	((devidx++))
elif [[ ! -z $internal ]]; then
	echo "Detected internal GPU, but it is not the primary, skipping"
fi


# add all other Nvidia
if [[ ${#nvidia_busids[@]} -gt 0 ]]; then
	if [[ ! -z $nv_connected && ${#nvidia_busids[@]} -gt 1 ]]; then
		echo "Adding $(( ${#nvidia_busids[@]} - 1 )) NVIDIA GPU"
	elif [[ $devidx -eq 0 ]]; then
		echo "Adding ${#nvidia_busids[@]} NVIDIA GPU, first is the primary one"
	else
		echo "Adding ${#nvidia_busids[@]} NVIDIA GPU"
	fi

	for busid in "${nvidia_busids[@]}"; do
		# skip already added
		[[ $nv_connected == $busid ]] && continue

		busid_dec=$(convert_busid $busid)

		# do not disable primary gpu output
		[[ $devidx -eq 0 ]] && useDisplayDevice= || useDisplayDevice="Option         \"UseDisplayDevice\" \"none\""

		conf+="
# --- $busid -------------------------------------------------------------------
Section \"Device\"
	Identifier     \"Device$devidx\"
	Driver         \"nvidia\"
	Option         \"Coolbits\" \"31\"
	BusID          \"PCI:$busid_dec\"
	Option         \"ConnectedMonitor\" \"DFP-0\"
	Option         \"CustomEDID\" \"DFP-0:/hive/etc/edid.bin\"
EndSection

Section \"Screen\"
	Identifier     \"Screen$devidx\"
	Device         \"Device$devidx\"
	Option         \"Coolbits\" \"31\"
	$useDisplayDevice
EndSection
"
		screens_section+=$'\t'"Screen $devidx \"Screen$devidx\" 0 0"$'\n'
		((devidx++))
	done
fi


# write config
echo "
#### AUTOGENERATED BY HIVE ####################################################################

Section \"ServerFlags\"
	Option \"BlankTime\" \"0\"
	Option \"StandbyTime\" \"0\"
	Option \"SuspendTime\" \"0\"
	Option \"OffTime\" \"0\"
EndSection

Section \"ServerLayout\"
	Identifier     \"Layout0\"

$screens_section
	InputDevice    \"Mouse0\" \"CorePointer\"
EndSection

Section \"Module\"
	Disable \"glx\"
EndSection

###############################################################################################

Section \"InputDevice\"
	Identifier     \"Mouse0\"
	Driver         \"mouse\"
	Option         \"Protocol\" \"auto\"
	Option         \"Device\" \"/dev/psaux\"
	Option         \"Emulate3Buttons\" \"no\"
	Option         \"ZAxisMapping\" \"4 5\"
EndSection

Section \"InputDevice\"
	Identifier     \"Keyboard0\"
	Driver         \"kbd\"
EndSection

###############################################################################################

Section \"Monitor\"
	Identifier     \"Monitor0\"
#	VendorName     \"Unknown\"
#	ModelName      \"Unknown\"
#	HorizSync       28.0 - 33.0
#	VertRefresh     43.0 - 72.0
	Option         \"DPMS\" \"0\"
EndSection

$conf
" > /etc/X11/xorg.conf

exit 0

#--use-display-device="DFP-0"
#--allow-empty-initial-configuration \ #Allow the X server to start even if no connected display devices could be detected.
#--preserve-driver-name #By default nvidia-xconfig changes the  display  driver  to "nvidia" for all configured X screens; this option preserves the existing driver name of each X screen.
#nvidia-xconfig \
#	--enable-all-gpus \
#	--cool-bits=31 \
#	--connected-monitor="DFP-0" \
#	--custom-edid="DFP-0:/hive/etc/edid.bin" \
#	--preserve-driver-name
