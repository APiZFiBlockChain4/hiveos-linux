#!/usr/bin/env bash

#[ -t 1 ] &&
. colors

date
echo ""

[[ -f $RIG_CONF ]] && . $RIG_CONF

[[ $MAINTENANCE == 2 ]] &&
	echo -e "${YELLOW}Maintenance mode enabled, exiting${NOCOLOR}" &&
	exit 1

DEFAULT_CORE_STATE=5

#GPU_NAVI="1002:7310|1002:7312|1002:7318|1002:7319|1002:731A|1002:731B|1002:731F"
#GPU_VEGA10="1002:6860|1002:6861|1002:6862|1002:6863|1002:6864|1002:6867|1002:6868|1002:6869|1002:686a|1002:686b|1002:686c|1002:686d|1002:686e|1002:686f|1002:687f"
. /hive/etc/amd.ids


n=`gpu-detect AMD`
if [[ $n == 0 ]]; then
	echo "No AMD cards detected, exiting"
	exit
fi
echo "Detected $n AMD cards"

if [ ! -f $AMD_OC_CONF ]; then
	echo -e "ERROR: $AMD_OC_CONF does not exist"
	exit
fi

source $AMD_OC_CONF


#pad arrays
[[ ! -z $CORE_CLOCK ]] &&
CORE_CLOCK=($CORE_CLOCK) &&
for (( i=${#CORE_CLOCK[@]}; i < $n; ++i )); do
	CORE_CLOCK[$i]=${CORE_CLOCK[$i-1]}
done

#[[ ! -z $CORE_VDDC_INDEX ]] &&
#CORE_VDDC_INDEX=($CORE_VDDC_INDEX) &&
#for (( i=${#CORE_VDDC_INDEX[@]}; i < $n; ++i )); do
#    CORE_VDDC_INDEX[$i]=${CORE_VDDC_INDEX[$i-1]}
#done

[[ ! -z $CORE_VDDC ]] &&
CORE_VDDC=($CORE_VDDC) &&
for (( i=${#CORE_VDDC[@]}; i < $n; ++i )); do
	CORE_VDDC[$i]=${CORE_VDDC[$i-1]}
done

#[[ - z $CORE_STATE ]] && CORE_STATE="5" #default is 5
[[ ! -z $CORE_STATE ]] &&
CORE_STATE=($CORE_STATE) &&
for (( i=${#CORE_STATE[@]}; i < $n; ++i )); do
	CORE_STATE[$i]=${CORE_STATE[$i-1]}
done

[[ ! -z $MEM_CLOCK ]] &&
MEM_CLOCK=($MEM_CLOCK) &&
for (( i=${#MEM_CLOCK[@]}; i < $n; ++i )); do
	MEM_CLOCK[$i]=${MEM_CLOCK[$i-1]}
done

[[ ! -z $MEM_STATE ]] &&
MEM_STATE=($MEM_STATE) &&
for (( i=${#MEM_STATE[@]}; i < $n; ++i )); do
	MEM_STATE[$i]=${MEM_STATE[$i-1]}
done



[[ ! -z $FAN ]] &&
FAN=($FAN) &&
for (( i=${#FAN[@]}; i < $n; ++i )); do
	FAN[$i]=${FAN[$i-1]}
done

[[ ! -z $REF ]] &&
REF=($REF) &&
for (( i=${#REF[@]}; i < $n; ++i )); do
	REF[$i]=${REF[$i-1]}
done


echo "CORE_CLOCK = ${CORE_CLOCK[*]}"
echo "CORE_STATE = ${CORE_STATE[*]}"
echo "CORE_VDDC  = ${CORE_VDDC[*]}"
echo "MEM_CLOCK  = ${MEM_CLOCK[*]}"
echo "MEM_STATE  = ${MEM_STATE[*]}"
echo "FAN        = ${FAN[*]}"
echo "REF        = ${REF[*]}"

#exit


dirs=`ls -d1 /sys/class/drm/card*/device/pp_table | sort --version-sort` #natural sort for 10+ cards
if [[ -z $dirs ]]; then
	echo -e "${RED}No AMD GPUs found as /sys/class/drm/card*/device/pp_table${NOCOLOR}"
	exit 1
fi

[[ -f $GPU_DETECT_JSON ]] &&
	gpu_names=`cat $GPU_DETECT_JSON | jq -r -c '.[] | select(.brand == "amd") | (.busid+"\""+.name+" "+.mem+"\"")'`

#cardno and busid can be unsorted, like card1=>03:00, card2=>05:00
busids_dirs=()
for dir in $dirs; do
	#alternative way: cat /sys/class/drm/card1/device/uevent | grep PCI_SLOT_NAME
	#/sys/devices/pci0000:00/0000:00:1c.6/0000:05:00.0/pp_table
	#/sys/devices/pci0000:00/0000:00:1c.1/0000:03:00.0/0000:04:07.0/0000:08:00.0/pp_table
	#busid=`realpath "$dir" | awk -F/ '{print $(NF-1)}'`

	basedir=${dir%/*} #cut off /pp_table
	busid=`cat $basedir/uevent | grep PCI_SLOT_NAME | awk -F= '{print $2}'`
	busids_dirs+=("$busid;$dir")
done

busids_dirs=`printf '%s\n' "${busids_dirs[@]}" | sort` #sorting by bus id

list=`lspci | grep -E "VGA|3D controller" | grep "Advanced Micro Devices" | grep -v -e "RS880"  -e "Stoney" | awk '{print $1}'`

i=-1
card_idx=-1

#for dir in $dirs; do
for bdir in $busids_dirs; do
	dir=`echo $bdir | awk -F\; '{print $2}'`

	echo ""

	#echo $dir
	#[[ $dir =~ /sys/class/drm/card([0-9]+)/device/pp_table ]]
	[[ $dir =~ \/card([0-9a-z]+)\/ ]]
	cardno=${BASH_REMATCH[1]}


	[[ -z $cardno ]] && echo -e "${RED}ERROR: can not match card no in $dir${NOCOLOR}" && continue

	#busid=`realpath /sys/class/drm/card$cardno/device | awk -F/ '{print $NF}'`
	busid=`echo $bdir | awk -F\; '{print $1}'`
	busid=${busid#0000:} #trim prefix

	(( card_idx++ ))

	# do not use internal gpus
	[[ ! "$list" =~ $busid ]] && continue

	(( i++ ))
	
	#03:00.0"Radeon RX 570 8192 MB"
	[[ $gpu_names =~ $busid\"([^\"]+) ]] &&
		name="${RED}${BASH_REMATCH[1]}${NOCOLOR} #$cardno" ||
		name=/sys/class/drm/card$cardno

	echo -e "${YELLOW}===${NOCOLOR} GPU ${CYAN}$i${NOCOLOR}, ${PURPLE}$busid${NOCOLOR} $name ${YELLOW}=== `date +"%T"`${NOCOLOR}"
	savedpp=/tmp/pp_tables/card$cardno/pp_table

	[[ ! -e $savedpp ]] && echo -e "ERROR: $savedpp not found, try to reboot" && continue

	##Start introducing VEGA
	VEGAS_COUNT=$( lspci -vnns $busid | grep VGA -A 2 | grep AMD -A 2 | grep Vega -A 2 | grep -v "Vega 8" | wc -l )
	NAVI_COUNT=$( lspci -vnns $busid | grep -Ei "$GPU_NAVI" | wc -l )
	IS_VEGA10=$( lspci -vnns $busid | grep -Ei "$GPU_VEGA10" | wc -l )
	
	if [[ $VEGAS_COUNT -ne 0 || $NAVI_COUNT -ne 0 ]]; then
		if [[ $IS_VEGA10 -gt 0 && $AGGRESSIVE == 1 ]]; then
			. /hive/sbin/amd-oc.vega.aggressive.sh
		else
			. /hive/sbin/amd-oc.vega.sh
		fi
	else
		# set auto performance level to reset manual DPM if no state will be set
		[[ -z $coreState && ${CORE_CLOCK[$i]} -le 400 && ${CORE_VDDC[$i]} -le 0 ]] &&
			echo "Setting DPM to auto mode" &&
			echo "auto" > /sys/class/drm/card$cardno/device/power_dpm_force_performance_level

		if [[ $AGGRESSIVE == 1 ]]; then
			. /hive/sbin/amd-oc.aggressive.sh
		else
			. /hive/sbin/amd-oc.classic.sh
		fi

		if [[ ! -z $coreState || ! -z $memoryState ]]; then
			echo "manual" > /sys/class/drm/card$cardno/device/power_dpm_force_performance_level

			[[ ! -z $coreState ]] &&
				echo "Setting DPM core state to $coreState" &&
				echo $coreState > /sys/class/drm/card$cardno/device/pp_dpm_sclk

			# setting memory state kills idle mode, so set it only if needed -
			# if state is set without clock or in aggressive with DPM 1 and core clock set
			[[ ! -z $memoryState ]] &&
				[[ $AGGRESSIVE != 1 || $coreState -le 1 || ${CORE_CLOCK[$i]} -le 400 ||
				( $memoryState != $maxMemstate && ${MEM_CLOCK[$i]} -le 400 ) ]] &&
					echo "Setting DPM memory state to $memoryState" &&
					echo $memoryState > /sys/class/drm/card$cardno/device/pp_dpm_mclk
		fi
	fi
done

sync
#just in case, silly flushing reasons
sleep 0.2

exit 0
