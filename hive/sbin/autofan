#!/usr/bin/env bash
source /etc/environment
. colors

gpu_detect_json="/run/hive/gpu-detect.json"
gpu_stats_json="/run/hive/gpu-stats.json"

export DISPLAY=":0"

NS='/usr/bin/nvidia-settings'
#AUTOFAN_LOG="/var/log/hive-autofan.log"

RIG_CONF="/hive-config/rig.conf"
CONF_FILE="/hive-config/autofan.conf"

MIN_COEF=80
MAX_COEF=110
SLEEP_TIME=20

#######################################################################
#settings (autofan.conf file content), default values
#target GPU temperature
DEF_TARGET_TEMP=
#minimal fan speed
DEF_MIN_FAN=30
#temperature of stop miner
DEF_CRITICAL_TEMP=85
#AMD fan control (AMD control enable-0/AMD control disable-1)
DEF_NO_AMD=0
#######################################################################



#we will restart miner only it was stopped by this script
miner_stopped_by_overheat=0

###
# Log write
function echo2 {
	#echo -e "$1" > /dev/tty1
	#echo -e "$1" >> $AUTOFAN_LOG
	echo -e "$1"
}


#check $gpu_detect_json and do nothing while not exist
while true; do 
	if [ -f $gpu_detect_json ]; then
		gpu_detect_json=`cat $gpu_detect_json`
		# TODO this block must be refactored to library functions
		amd_indexes_query='[ . | to_entries[] | select(.value.brand == "amd") | .key ]'
		amd_indexes_array=`echo "$gpu_detect_json" | jq -r "$amd_indexes_query | .[]"`
		amd_cards_number=`echo "$gpu_detect_json" | jq -c "$amd_indexes_query | length"`

		nvidia_indexes_query='[ . | to_entries[] | select(.value.brand == "nvidia") | .key ]'
		nvidia_indexes_array=`echo "$gpu_detect_json" | jq -r "$nvidia_indexes_query| .[]"`
		nvidia_cards_number=`echo "$gpu_detect_json" | jq -c "$nvidia_indexes_query | length"`

		# TODO cpus maybe required to use autofans too
		#cpu_indexes_query='[ . | to_entries[] | select(.value.brand == "cpu") | .key ]'
		#cpu_indexes_array=`echo "$gpu_detect_json" | jq -r "$cpu_indexes_query"`
		#cpu_cores_number=`echo "$gpu_detect_json" | jq -c "$cpu_indexes_query | length"`
		declare -a card_bus_ids_array=(`echo "$gpu_detect_json" | jq -r '[ . | to_entries[] | select(.value) | .value.busid ] | .[]'`)
		# TODO There is must be the way to remove space or use the whole value inside the quotes
		#declare -a card_names_array=(`echo "$gpu_detect_json" | jq '[ . | to_entries[] | select(.value) | .value.name ] | .[]'`)
		break
	else
		echo2 "${RED}No $gpu_detect_json file exist${NOCOLOR}"
	fi
	sleep 10
done


check_gpu () {
	if [[ $nvidia_indexes_array == '[]' && $amd_indexes_array == '[]' ]]; then
		echo2 "No ${RED}AMD${NOCOLOR} or ${GREEN}NVIDIA${NOCOLOR} cards detected"
		exit 1
	fi

	[[ $nvidia_cards_number > 0 ]] &&
		echo2 "You have ${GREEN}NVIDIA${NOCOLOR} GPU's: $nvidia_cards_number" && nvidia-smi -pm 1 > /dev/null 2>&1 && $NS -a GPUPowerMizerMode=1 > /dev/null 2>&1

	[[ $amd_cards_number > 0 ]] &&
		echo2 "You have ${RED}AMD${NOCOLOR} GPU's: $amd_cards_number"

	#check config
	if [ ! -f $CONF_FILE ]; then
		echo2 "${RED}No config $CONF_FILE${NOCOLOR}"
	fi
}



get_fan_speed () {
	local temperature=$1
	local temperature_previous=$2
	local gpu_fan_speed=$3
	local gpu_bus_id=$4
	local i=$5

	if [[ $temperature -lt $MIN_TEMP ]]; then
		[[ $CHANGE_COEF_FLAG -ne 1 ]] && CHANGE_COEF_FLAG=0
		target_fan_speed=$(($temperature * ($MIN_COEF-($MIN_TEMP - $temperature) * 2)/100))
		[[ $target_fan_speed -le $MIN_FAN ]] && target_fan_speed=$MIN_FAN
	elif [[ $temperature -ge $MIN_TEMP  &&  $temperature -le $TARGET_TEMP ]]; then
		target_fan_speed=$(( $temperature *(($temperature - $MIN_TEMP) * 4 + $MIN_COEF)/100 ))
		if [[ -n $temperature_previous && $(( $temperature+1 )) -eq $temperature_previous && $TARGET_TEMP -ge $temperature_previous ]]; then
					target_fan_speed=$(( $gpu_fan_speed-1 ))
		elif [[ -n $temperature_previous && $temperature -eq $temperature_previous ]]; then
					target_fan_speed=$gpu_fan_speed
		fi
	elif [[ $temperature -gt $TARGET_TEMP ]]; then
		CHANGE_COEF_FLAG=1
		target_fan_speed=$(( $temperature *(($temperature - $TARGET_TEMP) * 4 + $MAX_COEF)/100 ))
	fi

	[[ $target_fan_speed -gt 100 ]] &&
		target_fan_speed=100

	#coloring
	echo_temp="$temperature°C"
	[[ $temperature -gt $TARGET_TEMP ]] && echo_temp="${RED}$temperature°C${NOCOLOR}"
	[[ $temperature -lt $MIN_TEMP ]] && echo_temp="${BLUE}$temperature°C${NOCOLOR}"

	echo_fan="$target_fan_speed%"
	[[ $target_fan_speed -gt $gpu_fan_speed || $target_fan_speed -eq 100 ]] && echo_fan="${RED}$target_fan_speed%${NOCOLOR}"
	[[ $target_fan_speed -lt $gpu_fan_speed ]] && echo_fan="${GREEN}$target_fan_speed%${NOCOLOR}"

	[[ $6 -eq "Nvidia" ]] &&
		gpu_info+="GPU $i ${GREEN}$6${NOCOLOR} [$gpu_bus_id]: $echo_temp $echo_fan" ||
		gpu_info+="GPU $i ${RED}$6${NOCOLOR} [$gpu_bus_id]: $echo_temp $echo_fan"

#	[[ $target_fan_speed == 100 ]] &&
#		gpu_info+=" ${RED}MAX${NOCOLOR}"

	gpu_info+="\n"
}



###
# What we must to do if temperature reached some limits
check_overheat() {
	if [[ $miner_stopped_by_overheat && ! `screen -ls | grep "miner"` ]]; then
#	if [[ true ]]; then
		local t
		local allisok=1
		for t in ${temperatures_array[@]}; do
			if [[ $t -ge $(($CRITICAL_TEMP - 10)) ]]; then #cold enough to start miner again
				allisok=0
				break
			fi
		done

		if [[ $allisok == 1 ]]; then
			miner_stopped_by_overheat=0 #let's forget about this
			do_miner_action "miner-start"
			local msg="GPU cooled down, mining resumed"
			echo -en "${GREEN}"
			message ok "$msg"
			echo -en "${NOCOLOR}"
			#echo2 "${GREEN}$msg${NOCOLOR}"
		fi
	elif [[ $miner_stopped_by_overheat = 1 ]]; then
		local t
		for t in ${temperatures_array[@]}; do
			if [[ $t -ge $CRITICAL_TEMP ]]; then
				miner_stopped_by_overheat=1
				do_miner_action "miner-stop"
				local msg="GPU reached ${CRITICAL_TEMP}°C, mining stopped"
				echo -en "${RED}"
				message warning "$msg"
				echo -en "${NOCOLOR}"
				#echo2 "${RED}$msg${NOCOLOR}"
				break
			fi
		done
	fi
}


do_miner_action() {
	case $1 in
		"miner-start")
			if [[ ! `screen -ls | grep "miner"` ]]; then
				miner start
				#echo2 "${GREEN}Miner started${NOCOLOR}"
			fi

			if [[ -f $RIG_CONF ]]; then
				. $RIG_CONF
				[[ $WD_ENABLED==1 ]] &&
					wd start
			fi
		;;

		"miner-stop")
			if [[ `screen -ls | grep "miner"` ]]; then
				miner stop
				wd stop
				#echo2 "${RED}Miner stopped${NOCOLOR}"
			fi
		;;
	esac
}



event_by_temp_limit () {
	min_coef_limit=
	if [[ $CHANGE_COEF_FLAG == 0 ]]; then
		if [[ `screen -ls | grep "miner"` ]]; then
			#min_coef_limit_LOW
			if [[ $MIN_COEF -gt $(( $MIN_FAN*100/$MIN_TEMP+2 )) ]]; then
				MIN_COEF=$(( $MIN_COEF-1 ))
				MAX_COEF=$(( $MAX_COEF-1 ))
				echo2 "${CYAN}Technical info: min=$MIN_COEF max=$MAX_COEF${NOCOLOR}"
			fi
		fi
	elif [[ $CHANGE_COEF_FLAG == 1 ]]; then
		#min_coef_limit_HI
		[[ $MIN_COEF -lt $(( 10100/($TARGET_TEMP+1)-34 )) ]] && MIN_COEF=$(( $MIN_COEF+2 )) && MAX_COEF=$(( $MAX_COEF+2 )) &&
			echo2 "${CYAN}Technical info: min=$MIN_COEF max=$MAX_COEF${NOCOLOR}"
	fi
	CHANGE_COEF_FLAG=
}




# TODO merge with amd_auto_fan_control
nvidia_auto_fan_control () {
	args=
	for index in ${nvidia_indexes_array[@]}
	do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on nvidia_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		if [[ -z $gpu_temperature_previous ]]; then gpu_temperature_previous=0; fi
		local gpu_fan_speed=${fans_array[index]}
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="Nvidia"
		#event_by_temperature $gpu_temperature
		get_fan_speed $gpu_temperature $gpu_temperature_previous $gpu_fan_speed $card_bus_id $index $brand
		#not set fan_speed if not changed
		[[ $target_fan_speed -ne $gpu_fan_speed ]] && args+=" -a [gpu:$index]/GPUFanControlState=1 -a [fan:$index]/GPUTargetFanSpeed=$target_fan_speed"
	done
	[[ -n $args ]] && $NS $args > /dev/null 2>&1
}



amd_auto_fan_control () {
	for index in ${amd_indexes_array[@]}
	do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on amd_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		if [[ -z $gpu_temperature_previous ]]; then gpu_temperature_previous=0; fi
		local gpu_fan_speed=${fans_array[index]}
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="   ADM"
		#event_by_temperature $gpu_temperature
		get_fan_speed $gpu_temperature $gpu_temperature_previous $gpu_fan_speed $card_bus_id $index $brand
		#not set fan_speed if not changed
		[[ $target_fan_speed -ne $gpu_fan_speed ]] && wolfamdctrl -i $index --set-fanspeed $target_fan_speed 1>/dev/null
	done
}


auto_fan_control() {
	while true;	do
		TARGET_TEMP= #unset tt if it's not in config anymore
		CRITICAL_TEMP=
		MIN_FAN=
		NO_AMD=
		[[ -f $CONF_FILE ]] && . $CONF_FILE

		#set default values
		[[ -z $TARGET_TEMP ]] && TARGET_TEMP=$DEF_TARGET_TEMP
		[[ -z $CRITICAL_TEMP ]] && CRITICAL_TEMP=$DEF_CRITICAL_TEMP
		[[ -z $MIN_FAN ]] && MIN_FAN=$DEF_MIN_FAN
		[[ -z $NO_AMD ]] && NO_AMD=$DEF_NO_AMD


		echo2 "${GREEN}$(date +"%Y-%m-%d %T")${NOCOLOR}"
		#check if exist .conf

		declare -a temperatures_array=(`cat $gpu_stats_json | tail -1 | jq -r ".temp | .[]"`)

		if [[ -n $TARGET_TEMP && -f $CONF_FILE && -f $gpu_stats_json ]]; then
			MIN_TEMP=$(( TARGET_TEMP-5 ))


			if [[ $PREV_TARGET_TEMP != $TARGET_TEMP || $PREV_CRITICAL_TEMP != $CRITICAL_TEMP || $PREV_MIN_FAN != $MIN_FAN ]]; then
				echo2 "${PURPLE}Target temp $TARGET_TEMP°C, Miner stop at $CRITICAL_TEMP°C, Min Fan $MIN_FAN%${NOCOLOR}"
				PREV_TARGET_TEMP=$TARGET_TEMP
				PREV_CRITICAL_TEMP=$CRITICAL_TEMP
				PREV_MIN_FAN=$MIN_FAN
			fi



			declare -a fans_array=(`cat $gpu_stats_json | tail -1 | jq -r ".fan | .[]"`)
			gpu_info=

			if (( $nvidia_cards_number > 0 )); then
				nvidia_auto_fan_control
			fi

			if [[ $amd_cards_number > 0 && $NO_AMD == 0 ]]; then #enabled AMD
				amd_auto_fan_control
			fi

			echo2 "$gpu_info"

			declare -a temperatures_array_previous=(${temperatures_array[@]})

			event_by_temp_limit
		fi


		check_overheat


		#sleep $SLEEP_TIME
		read -t $SLEEP_TIME
	done
}



case $1 in
	run)
		#check running
#		process_count=`ps aux | grep "autofan" | grep -v grep | grep -v $$ | wc -l`
#		if [[ $process_count -gt 1 ]]; then #this process and another
#			echo -e "${RED}Autofan is already running${NOCOLOR}\nRun ${CYAN}autofan screen${NOCOLOR} to open it"
#			exit 1
#		fi

		check_gpu
		auto_fan_control
	;;

	*)
		session_count=`screen -ls autofan | grep autofan | wc -l`
		if [[ $session_count > 0 ]]; then
			screen -x -S autofan
		else #start new screen
			screen -dm -S autofan autofan run
			echo2 "Autofan screen stared"
		fi
	;;

esac
