#!/usr/bin/env bash

if [[ -z $RIG_CONF ]]; then #reread env variables as after upgrade this can be empty
	source /etc/environment
	export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
fi

# set minimum LA for watchdog to 2 * cores/threads + 1
WD_MIN_LA=$(( $(nproc --all) * 2 + 1 ))

WD_SLEEP=10 #seconds to sleep over iteration
OK_MESSAGE_REDUCE=$(( 1 * 60 / $WD_SLEEP )) #e.g. only every 6th message will be displayed to reduce log

[ -t 1 ] && . /hive/bin/colors

ok_count=0
check_count=0
gpu_err_count=0
high_la_count=0

LAST_STAT="/run/hive/last_stat.json"


function loadconf() {
	WD_ENABLED=

	if [ ! -f $RIG_CONF ]; then
		echo -e "${RED}No config $RIG_CONF${NOCOLOR}"
		echo "Exiting"
		exit 1
	else
		. $RIG_CONF
	fi

	[[ -z $WD_ENABLED || $WD_ENABLED != 1 ]] &&
		echo -e "${YELLOW}Watchdog not enabled, exiting${NOCOLOR}" &&
		exit 0

	[[ ! -z $MAINTENANCE && $MAINTENANCE -gt 0 ]] &&
		echo -e "${YELLOW}Maintenance mode enabled, exiting${NOCOLOR}" &&
		exit 1

	[[ -z $MINER ]] &&
		echo -e "${YELLOW}No miner is set in config, exiting${NOCOLOR}" &&
		exit 1

	
	
	if [[ $WD_MINHASHES_ALGO != "{}" ]]; then
		minhash=
		miner_algo=
		wd_algo=
		map_algo=
		[[ -e $LAST_STAT ]] && miner_algo=$(cat $LAST_STAT | jq -r ".params.miner_stats.algo")
		if [[ ! -z $miner_algo && $miner_algo != "null" ]]; then
			map="/hive/opt/algomap/"$MINER".json"
			[[ -e $map ]] && map_algo=$(cat $map | jq -r ".algomap.\"${miner_algo}\"")
			if [[ ! -z $map_algo && $map_algo != "null" ]];then
				wd_algo=$map_algo
			else 
				wd_algo=$miner_algo
			fi
			minhash=$(echo $WD_MINHASHES_ALGO | jq ".\"${wd_algo}\"")
		fi
		[[ -z $minhash || $minhash == "null" ]] && minhash=0.001
	else
		minhash=`echo $WD_MINHASHES | jq -r ".\"$MINER\""`
	fi
		
	log_algo="(any algo)"
	[[ ! -z $wd_algo ]] && log_algo="(${wd_algo})"
	
	[[ -z $minhash || $minhash == "null" ]] &&
		message warn "Minimal hashrate for $MINER and for algorithm is not set" &&
		echo -e "${RED}Minimal hashrate for $MINER is not set in config, exiting${NOCOLOR}" &&
		exit 1
}


function set_lastgood() {
	#lastgood=`date +%s`
	[[ -e $HASHRATE_KHS ]] &&
		lastgood=`stat -c %Y $HASHRATE_KHS` ||
		#lastgood=0 can't set it to 0, in case of boot agent may be late
		lastgood=`date +%s` #let's count from now

	miner_restart_count=0
}


function check_la() {

	local max_la=$WD_MAX_LA
	[[ $max_la -lt $WD_MIN_LA ]] && max_la=$WD_MIN_LA
	local max_la2x=$(( $max_la * 2 ))
	local la=`cat /proc/loadavg`
	local la1=`awk '{printf int($1)}' <<< $la`
	local la5=`awk '{printf int($2)}' <<< $la`

	# reboot immediately if LA (5 min) >= maxLA
	if [ $la5 -ge $max_la ]; then
		echo -e "${RED}LA is more than $max_la: $la5, rebooting ${NOCOLOR}"
		local top=`COLUMNS=110 top -bHn 1 | head -n 20`
		message error "LA > $max_la, rebooting" payload <<< "$top" >/dev/null
		sreboot
	# reboot if LA (1 min) >= maxLA * 2
	elif [ $la1 -ge $max_la2x ]; then
		local top=`COLUMNS=110 top -bHn 1 | head -n 20`
		# check few times to avoid short peaks
		if [[ $high_la_count -ge 2 ]]; then
			echo -e "${RED}LA is more than $max_la2x: $la1, rebooting ${NOCOLOR}"
			message error "LA > $max_la2x, rebooting" payload <<< "$top" >/dev/null
			sreboot
		else
			echo -e "${RED}LA is more than $max_la2x: $la1, waiting ${NOCOLOR}"
			[[ $high_la_count -eq 0 ]] && message warning "LA > $max_la2x" payload <<< "$top" >/dev/null
		fi
		((high_la_count++))
	else
		high_la_count=0
		[[ $check_count == 0 ]] && echo -e "${GREEN}OK${NOCOLOR} LA(5m): $la5.0 < $max_la.0, LA(1m): $la1.0 < $max_la2x.0"
	fi
}


function check_gpu() {
	# check if gpu-stat stop working most likely because of hanged gpu
	local gpu_cnt=`cat $GPU_STATS_JSON | jq 'length' 2>/dev/null`
	if [[ "$gpu_cnt" == "0" ]]; then
		# check few times to be sure
		if [[ $gpu_err_count -ge 2 ]]; then
			echo -e "{RED}GPU are lost, rebooting ${NOCOLOR}"
			cat $GPU_STATS_JSON | message error "GPU are lost, rebooting" payload >/dev/null
			sreboot
		else
			echo -e "{RED}GPU are lost, waiting ${NOCOLOR}"
			#[[ $gpu_err_count -eq 0 ]] && cat $GPU_STATS_JSON | message warning "GPU are lost" payload >/dev/null
		fi
		((gpu_err_count++))
	else
		gpu_err_count=0
	fi
}


function loop() {
	#echo -n "[`date`] "

	# check every 2nd interval, ie 20 sec
	if [[ $(( $check_count % 2 )) == 0 ]]; then
		[[ "$WD_CHECK_GPU" == "1" ]] && check_gpu
		[[ ! -z $WD_MAX_LA && $WD_MAX_LA -ge 1 ]] && check_la
	fi
	((check_count++))
	[[ $check_count -ge $OK_MESSAGE_REDUCE ]] && check_count=0


	khs=
	[[ -e $HASHRATE_KHS ]] && khs=`cat $HASHRATE_KHS`
	[[ -z $khs ]] && khs=0
	
	

	local hashok=`echo $khs $minhash | awk '{ print ($1 >= $2) ? 1 : 0 }'` #float comparison

	local new=`date +%s`
	# check and adjust time if changed too much
	if [[ ! -z $now ]]; then
		local diff=$(( $new - $now - $WD_SLEEP ))
		# must be 0 in most cases. adjust if diff is more than 2x sleep time
		if [[ $diff -lt $(( -2*$WD_SLEEP )) || $diff -gt $(( 2*$WD_SLEEP )) ]]; then
			echo "Adjusting time: ${diff}s"
			if [[ -e $HASHRATE_KHS ]]; then
				local old=$( stat -c %Y $HASHRATE_KHS )
				[[ $old == $lastgood || ( $old -ge $now && $old -le $(( $now + $WD_SLEEP )) ) ]] &&
					touch -c -m --date=@$(( $old + $diff )) $HASHRATE_KHS
			fi
			lastgood=$(( $lastgood + $diff ))
		fi
	fi
	now=$new

	if [[ $hashok == 1 ]]; then
		set_lastgood
		[[ $ok_count == 0 ]] &&
			echo -e "${GREEN}OK${NOCOLOR} ${CYAN}$MINER $log_algo${NOCOLOR} $khs kHs >= $minhash kHs"

		((ok_count++))
		[[ $ok_count -ge $OK_MESSAGE_REDUCE ]] && ok_count=0

		return
	fi
	
	local elapsed=$(( $now - $lastgood ))
	#echo Elapsed $elapsed seconds

	echo -e "${RED}BARK${NOCOLOR} ${CYAN}$MINER $log_algo${NOCOLOR} $khs kHs < $minhash kHs for $elapsed seconds"

	# check to reboot first
	if [[ ! -z $WD_REBOOT ]]; then
		reboot_timeout=`echo $WD_REBOOT 60 | awk '{print $1 * $2}'`
		if [[ $elapsed -ge $reboot_timeout ]]; then
			miner log | message danger "$MINER $log_algo low hashrate ($khs kH/s), rebooting" payload
			echo -e "---"
			echo -e "${RED}Rebooting after $WD_REBOOT minutes${NOCOLOR}"
			echo -e "---"
			#nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
			sreboot
			return #for testing and if it does not work)
		fi
	fi

	# check to restart miner
	if [[ ! -z $WD_MINER ]]; then
		miner_restart_timeout=`echo $WD_MINER 60 | awk '{print $1 * $2}'`
		if [[ $miner_restart_count == 0 && $elapsed -ge $miner_restart_timeout ]]; then
			miner log | message warn "$MINER $log_algo low hashrate ($khs kH/s), restarting" payload
			echo -e "---"
			echo -e "${YELLOW}Restarting ${CYAN}$MINER $log_algo${NOCOLOR} ${YELLOW}after $WD_MINER minutes${NOCOLOR}"
			echo -e "---"
			miner_restart_count=1
			miner restart
		fi
	fi
}

function run() {

	set_lastgood

	loadconf

	echo "MINER RESTART:  $WD_MINER minutes"
	echo "REBOOT:         $WD_REBOOT minutes"

	[[ "$WD_CHECK_GPU" == "1" ]] && echo "CHECK GPU:      Enabled"
	[[ ! -z $WD_MAX_LA && $WD_MAX_LA -ge 1 ]] && echo "MAX LA:         $WD_MAX_LA.0 (min $WD_MIN_LA.0)"

	while true; do
		loop
		sleep $WD_SLEEP
		loadconf
	done
}

########################################################################################################################

case $1 in
	run)
		run
	;;
	stop)
		systemctl stop hive-watchdog
	;;
	start)
		systemctl start hive-watchdog
	;;
	restart)
		systemctl restart hive-watchdog
	;;
	log)
		journalctl -u hive-watchdog --no-pager $2 $3 $4 $5 $6 $7
	;;
	status)
		systemctl status hive-watchdog
	;;
	*)
		bname=`basename $0`
		echo -e "${YELLOW}Hashrate Watchdog${NOCOLOR}"
		echo -e "Usage: ${CYAN}$bname start|stop|restart|log|status${NOCOLOR}"
	;;
esac
