#!/usr/bin/env bash
#[ -t 1 ] &&
. colors

# it is used to save OC settings to apply only changes on next run. can be disabled
#NVIDIA_OC_FILE=/run/hive/nvidia-oc

date
echo ""

[[ -f $RIG_CONF ]] && . $RIG_CONF

[[ $MAINTENANCE == 2 ]] &&
	echo -e "${YELLOW}Maintenance mode enabled, exiting${NOCOLOR}" &&
	exit 1

#Preventing nvidia-smi from running if necessary
NV_OFF=0
[[ -f "/run/hive/NV_OFF" ]] && read NV_OFF < "/run/hive/NV_OFF"
[[ $NV_OFF == 1 ]] && exit 0


systemctl status hivex > /dev/null
[[ $? -ne 0 ]] && echo -e "${YELLOW}WARNING: X Server is not running! Some settings will not be applied!${NOCOLOR}"

export DISPLAY=":0"

# check it in first place
if [ ! -f $NVIDIA_OC_CONF ]; then
	echo "$NVIDIA_OC_CONF does not exist"
	exit
fi

source $NVIDIA_OC_CONF

n=`gpu-detect NVIDIA`
if [[ $n == 0 ]]; then
	echo "No NVIDIA cards detected, exiting"
	exit
fi

echo "Detected $n NVIDIA cards"

if [ ! -f $GPU_DETECT_JSON ]; then
	gpu_detect_json=`gpu-detect listjson`
else
	gpu_detect_json=`cat $GPU_DETECT_JSON`
fi

n=`echo "$gpu_detect_json" | jq -c '[ . | to_entries[] | select(.value.brand == "nvidia") | .key ] | length'`

[[ $n -eq 0 ]] && echo -e "No cards available for OC! \nPlease check BIOS settings, risers, connectors and PSU. \nTry to update Nvidia drivers." && exit 1

if [[ ! -z $RUNNING_DELAY && $RUNNING_DELAY -gt 0 ]]; then
	[[ ! -z $MAX_RUNNING_DELAY && $RUNNING_DELAY -gt $MAX_RUNNING_DELAY ]] &&
		echo -e "${YELLOW}Limiting delay to ${MAX_RUNNING_DELAY} seconds${NOCOLOR}" &&
		RUNNING_DELAY=$MAX_RUNNING_DELAY
	echo -e "${CYAN}Sleeping $RUNNING_DELAY seconds...${NOCOLOR}"
	sleep $RUNNING_DELAY
fi

[[ -z $FAN || $FAN == "" ]] && FAN=0

[[ -z $PLIMIT || $PLIMIT == "" ]] && PLIMIT=0

[[ -z $OHGODAPILL_ENABLED || $OHGODAPILL_ENABLED == "" ]] && OHGODAPILL_ENABLED=0

#Start OhGodAnETHlargementPill. It will exit if its 0
OHGODAPILL_RUNNING=`ps aux | grep /hive/opt/ohgodapill/run.sh | grep -v grep | wc -l`
if [[ $OHGODAPILL_ENABLED == 1 ]]; then
	if [[ $OHGODAPILL_RUNNING -eq 0 ]]; then
		echo "> Start OhGodAnETHlargementPill"
		nohup /hive/opt/ohgodapill/run.sh $OHGODAPILL_ARGS > /dev/null 2>&1 &
		sleep 1
		sync
	fi
else
	if [[ $OHGODAPILL_RUNNING -ne 0 ]]; then
		pkill -f '/hive/opt/ohgodapill/run.sh'
		pkill -f '/hive/opt/ohgodapill/OhGodAnETHlargementPill-r2'
	fi
fi

#pad arrays
[[ ! -z $CLOCK ]] &&
CLOCK=($CLOCK) &&
for (( i=${#CLOCK[@]}; i < $n; ++i )); do
	CLOCK[$i]=${CLOCK[$i-1]}
done

[[ ! -z $MEM ]] &&
MEM=($MEM) &&
for (( i=${#MEM[@]}; i < $n; ++i )); do
	MEM[$i]=${MEM[$i-1]}
done

[[ ! -z $FAN ]] &&
FAN=($FAN) &&
for (( i=${#FAN[@]}; i < $n; ++i )); do
	FAN[$i]=${FAN[$i-1]}
done

[[ ! -z $PLIMIT ]] &&
PLIMIT=($PLIMIT) &&
for (( i=${#PLIMIT[@]}; i < $n; ++i )); do
	PLIMIT[$i]=${PLIMIT[$i-1]}
done

declare -a FANCNT=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.fan_cnt'`)

# load previous settings from file
if [[ ! -z $NVIDIA_OC_FILE && -f $NVIDIA_OC_FILE ]]; then
	source $NVIDIA_OC_FILE
	PREV_CLOCK=($PREV_CLOCK)
	PREV_MEM=($PREV_MEM)
	PREV_PLIMIT=($PREV_PLIMIT)
	PREV_FAN=($PREV_FAN)
	#echo ""
	#echo "OLD CORE  = ${PREV_CLOCK[*]}"
	#echo "OLD MEM    = ${PREV_MEM[*]}"
	#echo "OLD PLIMIT = ${PREV_PLIMIT[*]}"
	#echo "OLD FAN    = ${PREV_FAN[*]}"
fi

echo ""

echo "CORE   = ${CLOCK[*]}"
echo "MEM    = ${MEM[*]}"
echo "PLIMIT = ${PLIMIT[*]}"
echo "FAN    = ${FAN[*]}"
echo "FANCNT = ${FANCNT[*]}"

echo ""

pgrep --full nvidia-persistenced > /dev/null
if [[ $? -ne 0 ]]; then
	nvidia-persistenced --persistence-mode
	#nvidia-smi -pm 1
#else
#	nvidia-smi -pm 1
fi

_IFS=$IFS && IFS=$'\n'
declare -a NAME=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.name'`)
declare -a RAM=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.mem'`)
declare -a BUSID=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.busid'`)
declare -a PLMAX=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_max'`)
declare -a PLMIN=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_min'`)
declare -a PLDEF=(`echo "$gpu_detect_json" | jq -r '. | to_entries[] | select(.value.brand == "nvidia") | .value.plim_def'`)
IFS=$_IFS

fan_idx=0
exitcode=0

for (( i=0; i < $n; ++i )); do

	echo -e "${YELLOW}===${NOCOLOR} GPU ${CYAN}$i${NOCOLOR}, ${BUSID[$i]} ${GREEN}${NAME[$i]} ${RAM[$i]}${NOCOLOR}, PL: ${PLMIN[$i]}, ${PLDEF[$i]}, ${PLMAX[$i]}  ${YELLOW}=== `date +"%T"`${NOCOLOR}"

	if [[ "${PREV_PLIMIT[$i]}" == "${PLIMIT[$i]}" ]]; then
		echo "PLIMIT was already set to ${PLIMIT[$i]}"
	else
		pldef=${PLDEF[$i]%%[!0-9]*}
		if [[ ! -z $PLIMIT && ${PLIMIT[$i]} -gt 0 ]]; then
			# check limits
			#if [[ $pldef -gt 0 ]]; then
			#	plmax=${PLMAX[$i]%%[!0-9]*}
			#	plmin=${PLMIN[$i]%%[!0-9]*}
			#	[[ $plmax -gt $pldef && ${PLIMIT[$i]} -gt $plmax ]] && PLIMIT[$i]=${PLMAX[$i]%%[!0-9\.]*} && echo -e "${RED}Power limit was set to MAX value${NOCOLOR}"
			#	[[ $plmin -lt $pldef && ${PLIMIT[$i]} -lt $plmin ]] && PLIMIT[$i]=${PLMIN[$i]%%[!0-9\.]*} && echo -e "${RED}Power limit was set to MIN value${NOCOLOR}"
			#fi
			nvresult=`nvidia-smi -i $i -pl ${PLIMIT[$i]}`
			nvcode=$?
			[[ $nvcode -ne 0 ]] && color=$RED || color=$NOCOLOR
			nvresult=`echo "$nvresult" | grep -v "^$"`
			echo -e "${color}$nvresult${NOCOLOR}"
			[[ $nvcode -ne 0 ]] && exitcode=$nvcode
		else
			#if [[ $plcur != $pldef ]]; then
				echo "Restoring default power limit ${pldef}"
				nvidia-smi -i $i -pl $pldef | grep -v "^$"
			#fi
		fi
	fi
	
	#not working
	#nvidia-smi -i ${i} -ac 4004,1911

	args=
	[[ -z $PREV_POWERMIZER ]] &&
		args+=" -a [gpu:$i]/GPUPowerMizerMode=1"

	fans_count=${FANCNT[$i]}
	[[ -z $fans_count || $fans_count == "null" ]] && fans_count=1

	if [[ "${PREV_FAN[$i]}" == "${FAN[$i]}" ]]; then
		echo "FAN was already set to ${FAN[$i]}"
	else
		if [[ -z $FAN || ${FAN[$i]} == 0 ]]; then
			args+=" -a [gpu:$i]/GPUFanControlState=0"
		else
			args+=" -a [gpu:$i]/GPUFanControlState=1"
			for (( z = $fan_idx; z < $(( $fan_idx+$fans_count )); z++ )); do
				args+=" -a [fan:$z]/GPUTargetFanSpeed=${FAN[$i]}"
			done
		fi
	fi

	fan_idx=$(( $fan_idx+$fans_count ))

	#echo "i=$i x=$x"
	#GTX 1050 wanted i=2, allothers want i=3
	x=3
	if [[ ${NAME[$i]} =~ "1050" ]]; then x=2
	elif [[ ${NAME[$i]} =~ "P106-100" ]]; then x=2
	elif [[ ${NAME[$i]} =~ "P106-090" ]]; then x=1
	elif [[ ${NAME[$i]} =~ "P104-100" ]]; then x=1
	elif [[ ${NAME[$i]} =~ "P102-100" ]]; then x=1
	elif [[ ${NAME[$i]} =~ "1660 Ti" ]]; then x=4
	elif [[ ${NAME[$i]} =~ "RTX" ]]; then x=4
	elif [[ ${NAME[$i]} =~ "1650" ]]; then x=2
	fi

	if [[ "${PREV_CLOCK[$i]}" == "${CLOCK[$i]}" ]]; then
		echo "CORE CLOCK was already set to ${CLOCK[$i]}"
	else
		[[ ! -z $CLOCK && "${PREV_CLOCK[$i]}" != "${CLOCK[$i]}" ]] &&
			args+=" -a [gpu:$i]/GPUGraphicsClockOffset[$x]=${CLOCK[$i]}"
	fi
	
	if [[ "${PREV_MEM[$i]}" == "${MEM[$i]}" ]]; then
		echo "MEM CLOCK was already set to ${MEM[$i]}"
	else
		[[ ! -z $MEM ]] &&
			args+=" -a [gpu:$i]/GPUMemoryTransferRateOffset[$x]=${MEM[$i]}"
	fi

	[[ ! -z $LOGO_BRIGHTNESS && "${PREV_LOGO_BRIGHTNESS}" != "${LOGO_BRIGHTNESS}" ]] &&
		args+=" -a [gpu:$i]/GPULogoBrightness=$LOGO_BRIGHTNESS"

	if [[ ! -z $args ]]; then
		echo -en "${RED}"
		nvresult=`nvidia-settings $args`
		nvcode=$?
		#[[ $nvcode -ne 0 ]] && color=$RED || color=$NOCOLOR
		nvresult=`echo "$nvresult" | grep -v "^$"`
		echo -e "${NOCOLOR}$nvresult"
		[[ $nvcode -ne 0 ]] && exitcode=$nvcode
	fi
	
done

# save settings to file
if [[ ! -z $NVIDIA_OC_FILE ]]; then
	data="PREV_POWERMIZER=1"$'\n'
	data+="PREV_LOGO_BRIGHTNESS=$LOGO_BRIGHTNESS"$'\n'
	data+="PREV_CLOCK=\"${CLOCK[*]}\""$'\n'
	data+="PREV_MEM=\"${MEM[*]}\""$'\n'
	data+="PREV_FAN=\"${FAN[*]}\""$'\n'
	data+="PREV_PLIMIT=\"${PLIMIT[*]}\""$'\n'
	echo "$data" > $NVIDIA_OC_FILE
fi

#
#if [ -z $CPUFREQ ]; then
#    :
#    #echo "WARNING: CPUFREQ not set"
#else
#    :
#    #dont see any improvement with this
#    #cpufreq-set -c 0 -g performance
#    #cpufreq-set -c 1 -g performance
#    #cpufreq-set -c 0 -f 2800Mhz
#    #cpufreq-set -c 1 -f 2800Mhz
#    #echo "performance" >/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
#    #echo "performance" >/sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
#    #echo $CPUFREQ > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
#    #echo $CPUFREQ > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
#fi


exit $exitcode
